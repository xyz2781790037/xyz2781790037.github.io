<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://xyz2781790037.github.io/atom.xml" rel="self"/>
  
  <link href="https://xyz2781790037.github.io/"/>
  <updated>2025-03-23T07:55:50.573Z</updated>
  <id>https://xyz2781790037.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++STL</title>
    <link href="https://xyz2781790037.github.io/2025/03/20/C++STL/"/>
    <id>https://xyz2781790037.github.io/2025/03/20/C++STL/</id>
    <published>2025-03-20T12:03:05.000Z</published>
    <updated>2025-03-23T07:55:50.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-STL"><a href="#c-STL" class="headerlink" title="c++STL"></a>c++STL</h1><h3 id="STL的诞生"><a href="#STL的诞生" class="headerlink" title="STL的诞生"></a>STL的诞生</h3><ul><li>C++的<a href="https://github.com/xyz2781790037/CPP/blob/main/C%2B%2B%E6%A0%B8%E5%BF%83/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md"><strong>面向对象</strong></a>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></li><li>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</li><li>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></li></ul><h3 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器和算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器、空间配置器</strong></p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是用来存储和管理数据的结构，STL 提供了多种不同类型的容器，每种容器都有其特定的应用场景。按照数据存储方式，可以分为 <strong>序列式容器</strong> 和 <strong>关联式容器</strong>。</p><h4 id="序列式容器"><a href="#序列式容器" class="headerlink" title="序列式容器"></a><strong>序列式容器</strong></h4><p>用于 <strong>顺序存储数据</strong>，数据的存储顺序由用户决定，常见的有：</p><ul><li><a href="https://github.com/xyz2781790037/CPP/blob/main/C%2B%2B%E6%A0%B8%E5%BF%83/vector.md"><strong>vector</strong>（动态数组）</a>：支持快速随机访问，插入删除效率较低（尾部除外）。</li><li><a href="https://github.com/xyz2781790037/CPP/blob/main/C%2B%2B%E6%A0%B8%E5%BF%83/deque.md"><strong>deque</strong>（双端队列）</a>：支持头尾插入删除，适合需要频繁在两端操作的数据结构。</li><li><strong>list</strong>（双向链表）：支持高效插入删除（不支持随机访问）。</li><li><strong>forward_list</strong>（单向链表）：比 <code>list</code> 轻量级，仅支持单向遍历。</li><li><strong>array</strong>（固定大小数组）：C++11引入，类似 <code>vector</code> 但大小固定。</li><li><strong>stack</strong>（栈）：后进先出（LIFO）。</li><li><strong>queue</strong>（队列）：先进先出（FIFO）。</li></ul><h4 id="关联式容器"><a href="#关联式容器" class="headerlink" title="关联式容器"></a><strong>关联式容器</strong></h4><p>用于 <strong>按特定规则存储数据</strong>，通常是基于平衡二叉树（<code>std::set</code> 和 <code>std::map</code>）或哈希表（<code>std::unordered_set</code> 和 <code>std::unordered_map</code>）。</p><ul><li><strong>set</strong>（集合）：自动排序，元素唯一。</li><li><strong>multiset</strong>（多重集合）：允许重复元素，自动排序。</li><li><strong>map</strong>（映射表）：键值对存储，自动排序，键唯一。</li><li><strong>multimap</strong>（多重映射）：允许键重复，自动排序。</li><li><strong>unordered_set</strong>（无序集合）：基于哈希表，元素唯一，查找更快（O(1)）。</li><li><strong>unordered_multiset</strong>（无序多重集合）：允许重复元素，基于哈希表。</li><li><strong>unordered_map</strong>（无序映射）：哈希表实现，键唯一。</li><li><strong>unordered_multimap</strong>（无序多重映射）：允许键重复，哈希表实现。</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><code>#include &lt;algorithm&gt;</code></p><h3 id="2-1-非修改序列操作"><a href="#2-1-非修改序列操作" class="headerlink" title="2.1 非修改序列操作"></a><strong>2.1 非修改序列操作</strong></h3><ul><li><code>find(begin, end, value)</code>: 查找值</li><li><code>count(begin, end, value)</code>: 统计值出现的次数</li><li><code>for_each(begin, end, func)</code>: 对每个元素执行 <code>func</code></li></ul><h3 id="2-2-修改序列操作"><a href="#2-2-修改序列操作" class="headerlink" title="2.2 修改序列操作"></a><strong>2.2 修改序列操作</strong></h3><ul><li><code>copy(src_begin, src_end, dest_begin)</code>: 复制</li><li><code>replace(begin, end, old_value, new_value)</code>: 替换</li><li><code>remove(begin, end, value)</code>: 删除（逻辑删除，返回新的 <code>end</code> 迭代器）</li></ul><h3 id="2-3-排序与查找"><a href="#2-3-排序与查找" class="headerlink" title="2.3 排序与查找"></a><strong>2.3 排序与查找</strong></h3><ul><li><code>sort(begin, end)</code>: 排序（默认 <code>operator&lt;</code> 比较）</li><li><code>stable_sort(begin, end)</code>: 稳定排序</li><li><code>binary_search(begin, end, value)</code>: 二分查找（要求数据有序）</li><li><code>lower_bound(begin, end, value)</code>: 返回第一个大于等于 <code>value</code> 的位置</li><li><code>upper_bound(begin, end, value)</code>: 返回第一个大于 <code>value</code> 的位置</li></ul><h3 id="2-4-其他"><a href="#2-4-其他" class="headerlink" title="2.4 其他"></a><strong>2.4 其他</strong></h3><ul><li><code>reverse(begin, end)</code>: 逆序</li><li><code>unique(begin, end)</code>: 去重</li><li><code>next_permutation(begin, end)</code>: 计算下一个字典序排列</li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="迭代器的基本概念"><a href="#迭代器的基本概念" class="headerlink" title="迭代器的基本概念"></a><strong>迭代器的基本概念</strong></h4><p><strong>迭代器类似于指针</strong>，但它不仅仅局限于数组，还能适用于各种 STL 容器。</p><p>常见迭代器操作：</p><ul><li><code>it = container.begin();</code> → 指向容器的第一个元素</li><li><code>it = container.end();</code> → 指向容器末尾的<strong>下一个位置</strong></li><li><code>++it</code> → 迭代器向前移动</li><li><code>--it</code> → 迭代器向后移动（仅适用于双向迭代器）</li><li><code>*it</code> → 访问迭代器当前指向的元素</li></ul><h4 id="迭代器类型"><a href="#迭代器类型" class="headerlink" title="迭代器类型"></a>迭代器类型</h4><p><strong>常规迭代器</strong> (<code>iterator</code>)：可以修改容器中的元素。<code>begin()</code></p><p><strong>常量迭代器</strong> (<code>const_iterator</code>)：不能修改容器中的元素，只能读取。<code>cbegin()</code></p><p><strong>反向迭代器</strong> (<code>reverse_iterator</code>)：从容器的末尾向前遍历。<code>rbegin()</code></p><p><strong>常量反向迭代器</strong> (<code>const_reverse_iterator</code>)：与 <code>reverse_iterator</code> 类似，但不能修改元素。<code>crbegin()</code></p><table><thead><tr><th>迭代器类型</th><th>适用容器</th><th>支持操作</th></tr></thead><tbody><tr><td><strong>输入迭代器</strong></td><td>istream_iterator</td><td>只能读取一次，<code>++it</code></td></tr><tr><td><strong>输出迭代器</strong></td><td>ostream_iterator</td><td>只能写入一次，<code>++it</code></td></tr><tr><td><strong>前向迭代器</strong></td><td>forward_list</td><td>++it</td></tr><tr><td><strong>双向迭代器</strong></td><td>list<code>, </code>set<code>, </code>map</td><td><code>++it</code>, <code>--it</code></td></tr><tr><td><strong>随机访问迭代器</strong></td><td>vector<code>, </code>array<code>, </code>deque</td><td><code>+</code>, <code>-</code>, <code>it[n]</code>-&gt;<code>*(it  + n)</code></td></tr></tbody></table><h4 id="迭代器的基本作用"><a href="#迭代器的基本作用" class="headerlink" title="迭代器的基本作用"></a><strong>迭代器的基本作用</strong></h4><p>迭代器（Iterator）是<strong>一种对象</strong>，用于遍历和操作 STL 容器（如 <code>vector</code>, <code>list</code>, <code>array</code>, <code>map</code> 等）中的元素。迭代器的主要作用包括：</p><ol><li><strong>遍历容器</strong>（代替 <code>for</code> 循环和索引）<br><code>for(vector&lt;int&gt;::iterator c = works.begin();c != works.end();c++)</code> -&gt;<code>for(int c：works)</code></li><li><strong>提供统一的访问方式</strong>（适用于各种容器）</li><li><strong>支持 STL 算法</strong>（如 <code>sort()</code>, <code>find()</code>, <code>reverse()</code>）</li><li><strong>提高代码的通用性和可读性</strong></li><li><strong>避免直接使用指针操作，减少错误</strong></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>* p = &amp;v[<span class="hljs-number">0</span>];<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>std::cout &lt;&lt; *p;<br></code></pre></td></tr></table></figure><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><p><strong>仿函数（Functor）</strong> 是指 <strong>重载了 <code>operator()</code> 的类或结构体对象</strong>，它的行为类似于函数，但具有 <strong>类的特性</strong>。仿函数在 <strong>C++ STL</strong> 中主要用于 <strong>自定义排序、条件判断、计算等场景</strong>，并且可以携带状态信息（成员变量）。</p><p>仿函数本质上是一个 <strong>重载了 <code>operator()</code> 的类</strong>，这样它的对象可以像函数一样被调用</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Add</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Add add;<br>    std::cout &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) &lt;&lt; std::endl;<span class="hljs-comment">// add.operator()(3, 5)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="STL中的常见仿函数"><a href="#STL中的常见仿函数" class="headerlink" title="STL中的常见仿函数"></a>STL中的常见仿函数</h4><p><strong>算术仿函数</strong>、<strong>关系仿函数</strong>、<strong>逻辑仿函数</strong>和<strong>自定义仿函数</strong>,定义在 <code>&lt;functional&gt;</code> 头文件中。</p><p>（1）算术仿函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span>  <span class="hljs-comment">// 引入 STL 算术仿函数</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::plus&lt;<span class="hljs-type">int</span>&gt; add;  <span class="hljs-comment">// 加法仿函数</span><br>    std::minus&lt;<span class="hljs-type">int</span>&gt; sub; <span class="hljs-comment">// 减法仿函数</span><br>    std::multiplies&lt;<span class="hljs-type">int</span>&gt; mul; <span class="hljs-comment">// 乘法仿函数</span><br>    std::divides&lt;<span class="hljs-type">int</span>&gt; div; <span class="hljs-comment">// 除法仿函数</span><br>    std::modulus&lt;<span class="hljs-type">int</span>&gt; mod; <span class="hljs-comment">// 取模仿函数</span><br>    std::negate&lt;<span class="hljs-type">int</span>&gt; neg;  <span class="hljs-comment">// 取负仿函数</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;加法: &quot;</span> &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 10 + 5 = 15</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;取负: &quot;</span> &lt;&lt; <span class="hljs-built_in">neg</span>(<span class="hljs-number">7</span>) &lt;&lt; std::endl;    <span class="hljs-comment">// -7</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（2）关系仿函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::greater&lt;<span class="hljs-type">int</span>&gt; g;  <span class="hljs-comment">// 大于</span><br>    std::less&lt;<span class="hljs-type">int</span>&gt; l;     <span class="hljs-comment">// 小于</span><br>    std::greater_equal&lt;<span class="hljs-type">int</span>&gt; ge;  <span class="hljs-comment">// 大于等于</span><br>    std::less_equal&lt;<span class="hljs-type">int</span>&gt; le;     <span class="hljs-comment">// 小于等于</span><br>    std::equal_to&lt;<span class="hljs-type">int</span>&gt; eq;       <span class="hljs-comment">// 等于</span><br>    std::not_equal_to&lt;<span class="hljs-type">int</span>&gt; ne;   <span class="hljs-comment">// 不等于</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;5 &gt; 3: &quot;</span> &lt;&lt; <span class="hljs-built_in">g</span>(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) &lt;&lt; std::endl;  <span class="hljs-comment">// 1 (true)</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;5 == 3: &quot;</span> &lt;&lt; <span class="hljs-built_in">eq</span>(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 0 (false)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）逻辑仿函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::logical_and&lt;<span class="hljs-type">bool</span>&gt; land;  <span class="hljs-comment">// 逻辑与</span><br>    std::logical_or&lt;<span class="hljs-type">bool</span>&gt; lor;    <span class="hljs-comment">// 逻辑或</span><br>    std::logical_not&lt;<span class="hljs-type">bool</span>&gt; lnot;  <span class="hljs-comment">// 逻辑非</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;true &amp;&amp; false: &quot;</span> &lt;&lt; <span class="hljs-built_in">land</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 0 (false)</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;!true: &quot;</span> &lt;&lt; <span class="hljs-built_in">lnot</span>(<span class="hljs-literal">true</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 0 (false)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p><strong>STL 适配器</strong>是 C++ 标准库中的一种工具，它们用来改变或扩展容器、迭代器和函数对象的功能，而不需要改变原始的容器、迭代器或仿函数本身。通过适配器，我们可以以不同的方式使用容器、迭代器和函数对象，从而更方便地满足特定需求。</p><p>在 STL 中，主要有三种类型的适配器：</p><ol><li><strong>容器适配器</strong>（Container Adapters）</li><li><strong>迭代器适配器</strong>（Iterator Adapters）</li><li><strong>函数对象适配器</strong>（Function Object Adapters）</li></ol><h4 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h4><p>容器适配器实际上是对容器的<strong>接口</strong>进行修改或封装，但它们依然依赖于其他基础容器（如 <code>std::deque</code>、<code>std::vector</code>、<code>std::list</code>）来存储数据。它们并没有重新实现数据存储结构，而是提供了简化或者特定的数据操作方式,比如：</p><ul><li><code>std::stack</code> 是一个容器适配器，它封装了一个底层容器（通常是 <code>std::deque</code> 或 <code>std::vector</code>）并只暴露 <code>push</code>、<code>pop</code> 和 <code>top</code> 等接口。你不能直接访问 <code>std::stack</code> 中的元素，所有操作都受到限制以保持栈的 LIFO（后进先出）特性。</li></ul><p>区别：</p><ul><li><strong>暴露的接口不同</strong>：容器适配器提供的接口是经过简化或特定限制的，只能进行某些操作</li><li><strong>封装的容器不同</strong>：容器适配器内部依赖于标准容器，如 <code>std::deque</code> 或 <code>std::vector</code>，但它只暴露出适合某一场景的操作接口  <code>std::stack&lt;int, std::vector&lt;int&gt;&gt; stack_using_vector;</code></li><li><strong>没有单独的存储结构</strong>：容器适配器通常不拥有自己的存储结构，它们是对标准容器的一种封装。</li></ul><h4 id="迭代器适配器"><a href="#迭代器适配器" class="headerlink" title="迭代器适配器"></a>迭代器适配器</h4><p>迭代器适配器也是对迭代器的一种封装或扩展，通常是为了改变迭代器的行为。迭代器本身提供了容器元素的访问方式，而迭代器适配器通过对迭代器的封装，提供了额外的功能或行为。</p><h5 id="迭代器适配器的特点："><a href="#迭代器适配器的特点：" class="headerlink" title="迭代器适配器的特点："></a><strong>迭代器适配器的特点</strong>：</h5><ul><li><strong>改变迭代器的遍历方式</strong>：迭代器适配器可以改变迭代器的方向（例如反向遍历）或增强原始迭代器的功能。</li><li><strong>底层容器无关</strong>：迭代器适配器不会改变底层容器，它只改变迭代器本身的行为或使用方式。</li></ul><h5 id="迭代器适配器与普通迭代器的区别"><a href="#迭代器适配器与普通迭代器的区别" class="headerlink" title="迭代器适配器与普通迭代器的区别"></a><strong>迭代器适配器与普通迭代器的区别</strong></h5><p>迭代器适配器和普通迭代器的主要区别在于，<strong>它们并不直接用于遍历容器，而是用来改变容器元素访问的方式或行为</strong>：</p><ol><li><strong>普通迭代器</strong>：用于直接访问容器中的元素，按顺序进行遍历。</li><li><strong>迭代器适配器</strong>：通过封装普通迭代器，改变其行为。比如 <code>std::reverse_iterator</code> 会使得迭代器反向遍历，<code>std::insert_iterator</code> 用来在遍历过程中插入元素。</li></ol><h4 id="函数对象-仿函数-适配器"><a href="#函数对象-仿函数-适配器" class="headerlink" title="函数对象(仿函数)适配器"></a>函数对象(仿函数)适配器</h4><p>将现有的函数对象（Functors）或函数适配到新的接口或新的上下文。它使得函数对象或函数指针能够被更加灵活地使用，通常用于将一个函数对象转化成更通用的形式，或者是修改其行为。</p><p>函数对象适配器本质上<strong>是将函数（或者函数指针）转化为一个函数对象。这个适配器包装了原始函数，并提供了一个<code>operator()</code>来调用这个函数。</strong></p><p>使用主要体现在 <strong>函数对象的封装</strong> 和 <strong>使其适应不同的使用场景</strong></p><h5 id="函数对象的封装"><a href="#函数对象的封装" class="headerlink" title="函数对象的封装"></a>函数对象的封装</h5><p>函数对象适配器主要的作用之一是 <strong>封装</strong> 函数或函数指针，使其变得更加灵活和通用。简单地说，封装意味着将一个函数（或函数指针）转化为一个可以作为对象传递、存储和调用的形式。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Compare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &lt; b;  <span class="hljs-comment">// 比较两个整数</span><br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Compare com<br>    vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),com);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : v)&#123;<br>        cout &lt;&lt; num &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使其适应不同的使用场景</strong></p><h6 id="通过-std-function-将普通函数转化为可调用对象，适配-STL-算法。"><a href="#通过-std-function-将普通函数转化为可调用对象，适配-STL-算法。" class="headerlink" title="通过 std::function 将普通函数转化为可调用对象，适配 STL 算法。"></a>通过 <code>std::function</code> 将普通函数转化为可调用对象，适配 STL 算法。</h6><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLessThan</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &lt; b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br>    <br>    <span class="hljs-comment">// 使用 std::function 将普通函数适配为可调用对象</span><br>    std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; compareFunc = isLessThan;<br>    <br>    std::<span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), compareFunc);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : vec) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h3><p><strong>空间配置器（Allocator）</strong> 是一个用于管理内存分配和释放的机制，它为 STL 容器提供了一个统一的接口，以便容器能够根据需要分配和释放内存。通过自定义空间配置器，用户可以更精细地控制内存的管理方式，从而满足不同的内存管理需求。</p><p>在 STL 中，所有的容器默认使用 <code>std::allocator</code> 作为其空间配置器，<code>std::allocator</code> 使用 <code>new</code> 和 <code>delete</code> 来进行内存的分配和释放。</p><h4 id="std-allocator-的基本实现"><a href="#std-allocator-的基本实现" class="headerlink" title="std::allocator 的基本实现"></a><code>std::allocator</code> 的基本实现</h4><p><code>std::allocator</code> 是标准库提供的默认空间配置器，它提供了用于分配和释放内存的一组接口：</p><ul><li><code>allocate()</code>: 分配内存。</li><li><code>deallocate()</code>: 释放内存。</li><li><code>construct()</code>: 在已分配的内存上构造对象。</li><li><code>destroy()</code>: 销毁对象。</li></ul><h4 id="std-allocator-的基本接口"><a href="#std-allocator-的基本接口" class="headerlink" title="std::allocator 的基本接口"></a><code>std::allocator</code> 的基本接口</h4><h4 id="1-allocate"><a href="#1-allocate" class="headerlink" title="1. allocate"></a>1. <code>allocate</code></h4><p>用于分配一块内存，返回一个指向该内存块的指针。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">T* <span class="hljs-title">allocate</span><span class="hljs-params">(std::<span class="hljs-type">size_t</span> n)</span></span>;<br></code></pre></td></tr></table></figure><p><code>n</code> 是请求分配的元素数量。返回的指针指向一个足够大的内存块，可以容纳 <code>n</code> 个类型为 <code>T</code> 的对象。</p><h4 id="2-deallocate"><a href="#2-deallocate" class="headerlink" title="2. deallocate"></a>2. <code>deallocate</code></h4><p>释放之前通过 <code>allocate</code> 分配的内存。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deallocate</span><span class="hljs-params">(T* p, std::<span class="hljs-type">size_t</span> n)</span></span>;<br></code></pre></td></tr></table></figure><p><code>p</code> 是指向要释放的内存的指针，<code>n</code> 是分配的元素数量。</p><h4 id="3-construct"><a href="#3-construct" class="headerlink" title="3. construct"></a>3. <code>construct</code></h4><p>在指定的内存位置上构造对象。对于 <code>new</code> 和 <code>delete</code> 操作，这就是一种手动构造对象的方式。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">construct</span><span class="hljs-params">(T* p, Args&amp;&amp;... args)</span></span>;<br></code></pre></td></tr></table></figure><p>在 <code>p</code> 指向的内存位置构造一个类型为 <code>T</code> 的对象，使用传递给 <code>construct</code> 的参数。</p><h4 id="4-destroy"><a href="#4-destroy" class="headerlink" title="4. destroy"></a>4. <code>destroy</code></h4><p>销毁指定内存上的对象。对于动态分配的对象，这相当于手动调用 <code>delete</code>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(T* p)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">千磨万击还坚韧，任尔东西南北风</summary>
    
    
    
    
    <category term="C++" scheme="https://xyz2781790037.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c++左右值</title>
    <link href="https://xyz2781790037.github.io/2025/03/20/C++%E5%B7%A6%E5%8F%B3%E5%80%BC/"/>
    <id>https://xyz2781790037.github.io/2025/03/20/C++%E5%B7%A6%E5%8F%B3%E5%80%BC/</id>
    <published>2025-03-20T01:37:01.000Z</published>
    <updated>2025-03-22T10:40:19.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的左值和右值"><a href="#C-中的左值和右值" class="headerlink" title="C++中的左值和右值"></a>C++中的左值和右值</h1><h2 id="一、左值和右值的概念"><a href="#一、左值和右值的概念" class="headerlink" title="一、左值和右值的概念"></a>一、左值和右值的概念</h2><h4 id="左值"><a href="#左值" class="headerlink" title="左值"></a>左值</h4><p>左值是一个表示数据的表达式，它代表一个具名的内存位置，程序可以获取其地址，可以通过地址访问它们，是可被引用的数据对象。左值又可分为可修改的的左值和不可修改的左值。</p><ul><li>可修改的的左值<br>左值其实就是指可出现在赋值语句左边的表达式，它们的值是可以被修改的(<strong>最初的概念</strong>);</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a;<br>a = <span class="hljs-number">10</span>;<br> <br><span class="hljs-type">int</span>* ptr = &amp;a;<br>*ptr = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><ul><li>不可修改的左值<br>随着关键字const的引入，这个左值的概念发生了变化 。因为虽然不能对const变量赋值，但是可以获取其地址。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* ptrA = &amp;a; <span class="hljs-comment">//可以通过地址访问它</span><br>a = <span class="hljs-number">100</span>;              <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><h4 id="右值"><a href="#右值" class="headerlink" title="右值"></a>右值</h4><p>右值代表一个临时的值，不能被取地址，不能被修改，是不能出现在赋值语句的左边的。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br> <br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> c = a + b;<br>    <br><span class="hljs-type">int</span> d = <span class="hljs-built_in">func</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>面的a,b,c,d这几个变量都是左值，但是a+b和func()都是右值。 我们知道是无法写成如下这样的：</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> + b = <span class="hljs-number">3</span>;<br><span class="hljs-attribute">func</span>() = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h2 id="二-左值引用和右值引用"><a href="#二-左值引用和右值引用" class="headerlink" title="二. 左值引用和右值引用"></a>二. 左值引用和右值引用</h2><h4 id="1-左值引用-Lvalue-Reference"><a href="#1-左值引用-Lvalue-Reference" class="headerlink" title="1. 左值引用 (Lvalue Reference)"></a>1. 左值引用 (Lvalue Reference)</h4><p>左值引用是指引用一个左值（即具有持久性和可修改性的对象）。左值是指那些有地址的对象，比如变量名、数组元素等。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;ref = a;  <span class="hljs-comment">// ref 是 a 的左值引用</span><br></code></pre></td></tr></table></figure><ul><li>左值引用可以绑定到一个左值。</li><li>左值引用通常用于传递可修改的对象（传递引用可以避免复制，提高效率）。</li></ul><h4 id="2-右值引用-Rvalue-Reference"><a href="#2-右值引用-Rvalue-Reference" class="headerlink" title="2. 右值引用 (Rvalue Reference)"></a>2. 右值引用 (Rvalue Reference)</h4><p>右值引用是指引用一个右值（即临时对象或将要销毁的对象）。右值是没有持久性的对象，比如临时变量、字面量、函数返回值等。右值引用的作用就是允许一个对象的资源“转移”到另一个对象，而不是复制它。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> &amp;&amp;rref = <span class="hljs-number">10</span>;  <span class="hljs-comment">// rref 是 10 的右值引用</span><br></code></pre></td></tr></table></figure><ul><li>右值引用可以绑定到一个右值。</li><li>右值引用通常用于实现移动语义和完美转发，这是 C++11 引入的一项非常重要的特性，目的是减少不必要的对象拷贝，从而提高程序的性能。</li></ul><h4 id="左值与右值的区别"><a href="#左值与右值的区别" class="headerlink" title="左值与右值的区别"></a>左值与右值的区别</h4><ul><li>左值：具有持久性，能出现在赋值语句的左侧，通常是变量、数组元素、解引用等。</li><li>右值：没有持久性，不能出现在赋值语句的左侧，通常是临时对象、字面量、返回值等。</li></ul><h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>移动语义就是可以将对象的资源所有权从一个对象转移到另一个对象，而不进行资源的复制的技术。<br>移动语义得以实现，这其中便离不开右值引用的支持。<br>让编译器知道什么时候需要的是拷贝，什么时候不需要，这就是右值引用发挥作用的地方了。简单来说，就是编译器会根据会根据传进来的参数是左值引用还是右值引用来决定调用拷贝构造函数还是移动构造函数(移动构造函数里将资源从一个对象转移到另一个对象，而不用复制)。</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::string data; <span class="hljs-comment">// 假设我们有一个简单的成员变量，存储字符串</span><br><br>    <span class="hljs-comment">// 默认构造函数</span><br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">const</span> std::string&amp; str) : <span class="hljs-built_in">data</span>(str) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;MyClass constructor: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">MyClass</span>(MyClass&amp;&amp; other) <span class="hljs-keyword">noexcept</span> : <span class="hljs-built_in">data</span>(std::<span class="hljs-built_in">move</span>(other.data)) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;MyClass move constructor\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值操作符</span><br>    MyClass&amp; <span class="hljs-keyword">operator</span>=(MyClass&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;MyClass move assignment operator\n&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other) &#123;<br>            data = std::<span class="hljs-built_in">move</span>(other.data); <span class="hljs-comment">// 通过移动将资源转移到当前对象</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印 data</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyClass <span class="hljs-title">obj1</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello, world!&quot;</span>)</span></span>; <span class="hljs-comment">// 调用默认构造函数</span><br>    obj<span class="hljs-number">1.</span><span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 移动构造一个新对象</span><br>    MyClass obj2 = std::<span class="hljs-built_in">move</span>(obj1); <span class="hljs-comment">// 调用移动构造函数</span><br>    obj<span class="hljs-number">2.</span><span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 移动赋值操作符</span><br>    <span class="hljs-function">MyClass <span class="hljs-title">obj3</span><span class="hljs-params">(<span class="hljs-string">&quot;Temporary Data&quot;</span>)</span></span>;<br>    obj<span class="hljs-number">3.</span><span class="hljs-built_in">print</span>();<br>    obj3 = std::<span class="hljs-built_in">move</span>(obj2); <span class="hljs-comment">// 调用移动赋值操作符</span><br>    obj<span class="hljs-number">3.</span><span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs bush">MyClass constructor: Hello, world!<br>Data: Hello, world!<br>MyClass move constructor<br>Data: Hello, world!<br>MyClass constructor: Temporary Data<br>Data: Temporary Data<br>MyClass move assignment operator<br>Data: Hello, world!<br></code></pre></td></tr></table></figure><ol><li>右值引用让编译器知道何时可使用移动语义</li><li>编译移动构造函数，使其提供所需的方法。也就是怎么让资源从一个对象转移到另一个对象，而不用复制</li></ol><h2 id="完美转发"><a href="#完美转发" class="headerlink" title="完美转发"></a>完美转发</h2><p>完美转发（Perfect Forwarding）是 C++11 引入的一种技术，它允许我们在不丢失类型信息的情况下将函数参数转发给另一个函数。完美转发确保了无论传递给函数的是<strong>左值</strong>还是<strong>右值</strong>，都能够正确地转发到目标函数中，而不会进行不必要的拷贝或失去原始类型的特性。</p><p>完美转发的关键在于<strong>转发引用（Forwarding Reference）</strong>，也叫做**万能引用（Universal Reference），**通过 T&amp;&amp; 来实现。</p><h4 id="引用折叠"><a href="#引用折叠" class="headerlink" title="引用折叠"></a>引用折叠</h4><p>在 C++ 中，<strong>引用不能引用引用</strong>（例如 int&amp; &amp; 是非法的），但在模板和 decltype 等场景下，我们可能会遇到<strong>多重引用</strong>，这时 C++ 需要确定最终的<strong>引用</strong>类型，这就是引用折叠规则的作用。</p><blockquote><p>引用折叠规则：<br>&amp; + &amp; -&gt; &amp;<br>&amp; + &amp;&amp; -&gt; &amp;<br>&amp;&amp; + &amp; -&gt; &amp;<br>&amp;&amp; + &amp;&amp; -&gt; &amp;&amp;</p></blockquote><ul><li>任何左值引用（&amp;）+ 任何引用（&amp; 或 &amp;&amp;）&#x3D; 左值引用（&amp;）</li><li>只有右值引用（&amp;&amp;）+ 右值引用（&amp;&amp;）&#x3D; 右值引用（&amp;&amp;）</li></ul><h4 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h4><p>std::forward 是 C++11 引入的一个标准库函数，专门用于完美转发（Perfect Forwarding），它的主要作用是在模板中保持参数的原始值类别（左值或右值），确保参数不会被意外降级为左值，从而避免性能问题或语义错误。<br><strong>std::forward 的核心作用就是让参数以“合适”的方式传递给其他函数，而不改变它原来的值类别（左值或右值）。</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span>  <span class="hljs-comment">// std::forward</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x)</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Lvalue reference\n&quot;</span>; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;&amp; x)</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Rvalue reference\n&quot;</span>; &#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(T&amp;&amp; arg)</span> </span>&#123; <br>    <span class="hljs-built_in">process</span>(std::forward&lt;T&gt;(arg));  <span class="hljs-comment">// 通过 std::forward 传递参数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">42</span>;<br>    <span class="hljs-built_in">wrapper</span>(a);  <span class="hljs-comment">// 左值传递</span><br>    <span class="hljs-built_in">wrapper</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// 右值传递</span><br>&#125;<br><span class="hljs-comment">//Lvalue reference</span><br><span class="hljs-comment">//Rvalue reference</span><br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">wrapper</span>(a);<br></code></pre></td></tr></table></figure><ul><li><code>T</code> 被推导为 <code>int&amp;</code>，所以 <code>T&amp;&amp;</code> 变成 <strong><code>int&amp; &amp;&amp;</code>，根据引用折叠规则，它变成 <code>int&amp;</code></strong>。</li><li><code>std::forward&lt;int&amp;&gt;(arg)</code> → <code>static_cast&lt;int&amp;&gt;(arg)</code>，保持 <code>arg</code> 作为左值。</li><li><code>process(int&amp;)</code> 被调用。</li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">wrapper</span>(<span class="hljs-number">42</span>);<br></code></pre></td></tr></table></figure><ul><li><code>T</code> 被推导为 <code>int</code>，所以 <code>T&amp;&amp;</code> <strong>保持为 <code>int&amp;&amp;</code></strong>。</li><li><code>std::forward&lt;int&gt;(arg)</code> → <code>static_cast&lt;int&amp;&amp;&gt;(arg)</code>，保持 <code>arg</code> 作为右值。</li><li><code>process(int&amp;&amp;)</code> 被调用。</li></ul><p>如果不使用 <code>std::forward</code></p><p><code>wrapper(42);</code> 传递 <code>arg</code> 时，<strong><code>arg</code> 作为一个具名变量，被视为左值</strong>，即使 <code>T</code> 是 <code>int&amp;&amp;</code>。</p><p>结果：<strong>右值 <code>42</code> 变成左值，调用 <code>process(int&amp;)</code>，破坏了移动语义</strong>。</p><h4 id="std-forward-与-std-move-的区别"><a href="#std-forward-与-std-move-的区别" class="headerlink" title="std::forward 与 std::move 的区别"></a><strong><code>std::forward</code> 与 <code>std::move</code> 的区别</strong></h4><h5 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a><strong><code>std::move</code></strong></h5><ul><li><code>std::move(arg)</code> <strong>无条件地</strong> 将 <code>arg</code> <strong>转换为右值</strong>（<code>T&amp;&amp;</code>）。</li><li>适用于<strong>希望明确转移所有权</strong>的场景（如移动构造函数）。</li></ul><h5 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a><strong><code>std::forward</code></strong></h5><ul><li><code>std::forward&lt;T&gt;(arg)</code> <strong>只有当 <code>T</code> 是右值引用（<code>T&amp;&amp;</code>）时，才会将 <code>arg</code> 作为右值传递</strong>。</li><li>适用于<strong>泛型代码，确保参数的原始值类别不变</strong>。</li></ul>]]></content>
    
    
    <summary type="html">闲居清风亭，左右清风来。</summary>
    
    
    
    
    <category term="C++" scheme="https://xyz2781790037.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>西邮Linux兴趣小组2024纳新面试题题解</title>
    <link href="https://xyz2781790037.github.io/2024/10/29/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842024%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://xyz2781790037.github.io/2024/10/29/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842024%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2024-10-29T12:12:36.000Z</published>
    <updated>2025-03-03T04:15:44.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本题目只作为西邮 Linux 兴趣小组 2024 纳新面试的有限参考。<br>为节省版面，本试题的程序源码省去了 #include 指令。<br>本试题中的程序源码仅用于考察 C 语言基础，不应当作为 C 语言「代码风格」的范例。<br>所有题目编译并运行于 x86_64 GNU&#x2F;Linux 环境。</p></blockquote><h1 id="0-聪明的吗喽​"><a href="#0-聪明的吗喽​" class="headerlink" title="0. 聪明的吗喽​"></a>0. 聪明的吗喽​</h1><blockquote><p>一个小猴子边上有 100 根香蕉，它要走过 50 米才能到家，每次它最多搬 50 根香蕉，（多了就拿不动了），它每走 1 米就要吃掉一根，请问它最多能把多少根香蕉搬到家里。</p></blockquote><p>（提示：他可以把香蕉放下往返走，但是必须保证它每走一米都能有香蕉吃。也可以走到 n 米时，放下一些香蕉，拿着 n 根香蕉走回去重新搬 50 根。）</p><p> <em><em>有一百根香蕉，因为他每次最多搬50根，所以将这100根香蕉分成a，b两组。所以把它分成前50根和后50根，在前50根的时候他每走一米，搬了a组，要吃一根，然后回去，又吃一根，然后将b组搬一米，吃一根，&#x3D;&#x3D;所以每走一米要吃三根&#x3D;&#x3D;，在前到16米时，它已经吃了48根，这时候要分第十七米了，它有两种选择:&#x3D;&#x3D;1.直接拿着那个有50根香蕉的走，17米时吃了1根，剩了49根&#x3D;&#x3D;；2。&#x3D;&#x3D;继续像原来的方案一样，到十七米时也为</em>52 - 3 &#x3D; 49根*&#x3D;&#x3D;；之后就每走一米然后吃一根，直到50米走完，<em>49 - 33 &#x3D; 16根</em>。所以最后答案为*16根</em>。**</p><h1 id="1-西邮Linux欢迎你啊​"><a href="#1-西邮Linux欢迎你啊​" class="headerlink" title="1. 西邮Linux欢迎你啊​"></a>1. 西邮Linux欢迎你啊​</h1><p>请解释以下代码的运行结果。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-number">1.</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">2024</span>;<br><br>    <span class="hljs-keyword">for</span> (; a &gt;= <span class="hljs-number">0</span>; a--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi guys! Join Linux - 2%d&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&quot;</span>)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">Hi guys! Join Linux - <span class="hljs-number">2024</span><br>......<br></code></pre></td></tr></table></figure><p> <strong>此处为printf函数嵌套,用到了printf的返回值，printf返回值为打印元素的个数.并且进入嵌套时从嵌套外进去嵌套，读取时从最内侧的开始向外侧读取,由于最里面没有东西，所以返回值是0，最外面的那个看的是里面printf的字符个数，一共有24个字符，所以最后会打印2024.unsigned int 的取值范围为&#x3D;&#x3D;0 - 2^32 - 1&#x3D;&#x3D;.当a等于0时，它会从0直接到最大值，不会有负数，所以&#x3D;&#x3D;for循环会无限执行下去&#x3D;&#x3D;。</strong></p><h1 id="2-眼见不一定为实"><a href="#2-眼见不一定为实" class="headerlink" title="2. 眼见不一定为实"></a>2. 眼见不一定为实</h1><p>输出为什么和想象中不太一样？</p><p>你了解 sizeof() 和 strlen() 吗？他们的区别是什么？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> p0[] = <span class="hljs-string">&quot;I love Linux&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p1 = <span class="hljs-string">&quot;I love Linux\0Group&quot;</span>;<br>    <span class="hljs-type">char</span> p2[] = <span class="hljs-string">&quot;I love Linux\0&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, <span class="hljs-built_in">strcmp</span>(p0, p1), <span class="hljs-built_in">strcmp</span>(p0, p2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p0) == <span class="hljs-keyword">sizeof</span>(p1), <span class="hljs-built_in">strlen</span>(p0) == <span class="hljs-built_in">strlen</span>(p1));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0<br>0<br>0<br>1<br></code></pre></td></tr></table></figure><blockquote><p><strong>sizeof和strlen的区别：1.sizeof 是运算符，而strlen 是C语言库函数中的一个函数,且使用时包含&#x3D;&#x3D;头文件&lt;string.h&gt;&#x3D;&#x3D;；2.sizeof 操作符用于计算变量或类型的大小，一般单位为&#x3D;&#x3D;字节&#x3D;&#x3D;，通常用于计算内存大小。3.strlen是计算字符串长度的，遇到\0结束，&#x3D;&#x3D;返回不包括\0&#x3D;&#x3D;，即如果没有\0则会计算出随机值。</strong></p></blockquote><p><strong>strcmp函数是C语言中的字符串比较函数，用于比较两个字符串的大小，且遇到\0或不同的字符会自动结束。&#x3D;&#x3D;相等为0,第一个小于第二个，小于0&#x3D;&#x3D;.这里的p1，p2，p0在\0处之前都相等，所以第一行需要打印的都为0；sizeof(第二条)会检索全部所以两个不相等，所以为0,strlen到\0结束，所以相等。</strong></p><h1 id="3-1-1-1-0-0-1"><a href="#3-1-1-1-0-0-1" class="headerlink" title="3. 1.1 - 1.0 !&#x3D; 0.1"></a>3. 1.1 - 1.0 !&#x3D; 0.1</h1><p>为什么会这样，除了下面给出的一种方法，还有什么方法可以避免这个问题？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">float</span> a = <span class="hljs-number">1.0</span>, b = <span class="hljs-number">1.1</span>, ex = <span class="hljs-number">0.1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b - a == ex is %s\n&quot;</span>, (b - a == ex) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br>    <span class="hljs-type">int</span> A = a * <span class="hljs-number">10</span>, B = b * <span class="hljs-number">10</span>, EX = ex * <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;B - A == EX is %s\n&quot;</span>, (B - A == EX) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>float、double为浮点数，小数位数有限，比较容易损失精度。float类型数字在计算器中以二进制类型存储，&#x3D;&#x3D;对于一些十进制小数，不能精确地用二进制表示，所以会导致1.1 - 1.0 !&#x3D; 0.1.&#x3D;&#x3D;</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> a = <span class="hljs-number">1.0</span>, b = <span class="hljs-number">1.1</span>, ex = <span class="hljs-number">0.1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b - a == ex is %s\n&quot;</span>, (b - a &lt; ex + <span class="hljs-number">0.0001</span>) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>此时会计算为正确。除此之外，还可以用Decimal,Decimal 不会把小数转换为二进制，而是就用十进制。</strong></p><h1 id="4-听说爱用位运算的人技术都不太差"><a href="#4-听说爱用位运算的人技术都不太差" class="headerlink" title="4. 听说爱用位运算的人技术都不太差"></a>4. 听说爱用位运算的人技术都不太差</h1><p>解释函数的原理，并分析使用位运算求平均值的优缺点。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">average</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start == end)<br>        <span class="hljs-keyword">return</span> nums[start];<br>    <span class="hljs-type">int</span> mid = (start + end) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> leftAvg = average(nums, start, mid);<br>    <span class="hljs-type">int</span> rightAvg = average(nums, mid + <span class="hljs-number">1</span>, end);<br>    <span class="hljs-keyword">return</span> (leftAvg &amp; rightAvg) + ((leftAvg ^ rightAvg) &gt;&gt; <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>leftAvg &amp; rightAvg：获取 leftAvg 和 rightAvg 的共同部分。<br>leftAvg ^ rightAvg：获取两个平均值不同的部分。<br>((leftAvg ^ rightAvg) &gt;&gt; 1)：将不同的部分右移一位，相当于除以2。<br>最后，将共同部分与右移后的不同部分相加，得到最终的平均值。</p></blockquote><p> <strong>以下面的例子为例</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> a = average(arr, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数用递归的方式来求平均值，将数组分为左右两半，分别计算每一半的平均值。<br><code>1 2 3 4 5</code>，第一次结束后为 <code>1 2 3</code> <code>4 5</code>,然后<code>1 2</code> <code>3</code>,4 5计算得 4（因为为int类型）,<code>1 2</code>计算为1,即 <code>1 3 4</code><br>再分为<code>1 3</code> <code>4</code>,计算为2,4,最后算出为<code>3</code>。</p><blockquote><p>优点：高效，计算速度快。<br>缺点：误差太大。</p></blockquote><h1 id="5-全局还是局部"><a href="#5-全局还是局部" class="headerlink" title="5. 全局还是局部!!!"></a>5. 全局还是局部!!!</h1><p>先思考输出是什么，再动动小手运行下代码，看跟自己想得结果一样不一样 &gt;-&lt;</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> j = <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">5</span>) i++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d, j = %d\n&quot;</span>, i, j);<br>    <span class="hljs-keyword">return</span> i % j;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a = func();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d, j = %d\n&quot;</span>, i, j);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">11 15 <br>11<br>1 15<br></code></pre></td></tr></table></figure><p><strong>先要搞清楚定义：局部变量：&#x3D;&#x3D;定义在函数体内部的变量，作用域仅限于函数体内部。离开函数体就会无效。再调用就是出错。&#x3D;&#x3D;<br>全局变量：&#x3D;&#x3D;所有的函数外部定义的变量，它的作用域是整个程序，也就是所有的源文件，包括.c和.h文件。&#x3D;&#x3D;<br>在 C 或 C++等语言中，如果在全局变量和局部变量（如在 main 函数中定义的变量）有相同的名称，在局部作用域（即 main 函数内部）中会优先使用局部变量，局部变量会“压制”全局变量。这是因为编译器在查找变量时，会首先在当前的局部作用域中查找，如果找到了同名变量就使用它，而不会使用全局作用域中的同名变量。所以，在func函数里，i被重新定义，优先使用i &#x3D; 10,i++后为11,a &#x3D; 11 % 15 &#x3D; 11；&#x3D;&#x3D;在main函数里没有i，所以会用全局变量&#x3D;&#x3D;，i &#x3D; 1;</strong></p><h1 id="6-指针的修罗场：改还是不改，这是个问题"><a href="#6-指针的修罗场：改还是不改，这是个问题" class="headerlink" title="6. 指针的修罗场：改还是不改，这是个问题"></a>6. 指针的修罗场：改还是不改，这是个问题</h1><p>指出以下代码中存在的问题，并帮粗心的学长改正问题。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> *p = &amp;a;<br>    <span class="hljs-type">int</span> * <span class="hljs-type">const</span> q = &amp;b;<br>    *p = <span class="hljs-number">3</span>, q = &amp;a;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> r = &amp;a;<br>    *r = <span class="hljs-number">4</span>, r = &amp;b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;第一个定义的是常量指针，它的值无法更改，但地址可以更改。<br>第二个定义的是指针常量，它的地址无法更改，但值可以更改。&#x3D;&#x3D;</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">p = &amp;b, *q = <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;第三个为常量指针常量，它的值无法更改，且它的地址无法更改。所以不能改变地址和值。&#x3D;&#x3D;</strong></p><h1 id="7-物极必反？"><a href="#7-物极必反？" class="headerlink" title="7. 物极必反？"></a>7. 物极必反？</h1><blockquote><p>你了解 argc 和 argv 吗，这个程序里的 argc 和 argv 是什么？<br>程序输出是什么？解释一下为什么。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-keyword">while</span> (argc++ &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = argc, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (--a || b++ &amp;&amp; c--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; argv[i] != <span class="hljs-literal">NULL</span>; i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, a, b, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;argv[]是命令行参数,argc是从命令行传给程序的参数个数(至少为1)&#x3D;&#x3D;<br>在没有传入参数时 argc &#x3D; 1,while(argc++ &gt; 0),会让他从1加到最大，直到溢出为-2147483648，–a是先给a减一，a &#x3D; 0;c– ，先用c &#x3D; 0,c &#x3D; -1于是if不执行，所以执行最后。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">a = <span class="hljs-number">0</span>, b = <span class="hljs-number">-2147483646</span>, c = <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h1 id="8-指针？数组？数组指针？指针数组？"><a href="#8-指针？数组？数组指针？指针数组？" class="headerlink" title="8. 指针？数组？数组指针？指针数组？"></a>8. 指针？数组？数组指针？指针数组？</h1><p>在主函数中定义如下变量：</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-type">int</span>(*b)[<span class="hljs-number">2</span>] = &amp;a;<br>    <span class="hljs-type">int</span> *c[<span class="hljs-number">2</span>] = &#123;a, a + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说说这些输出分别是什么？</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">a, a + <span class="hljs-number">1</span>, &amp;a, &amp;a + <span class="hljs-number">1</span>, *(a + <span class="hljs-number">1</span>), <span class="hljs-keyword">sizeof</span>(a), <span class="hljs-keyword">sizeof</span>(&amp;a)<br>*b, *b + <span class="hljs-number">1</span>, b, b + <span class="hljs-number">1</span>, *(*b + <span class="hljs-number">1</span>), <span class="hljs-keyword">sizeof</span>(*b), <span class="hljs-keyword">sizeof</span>(b)<br>c, c + <span class="hljs-number">1</span>, &amp;c, &amp;c + <span class="hljs-number">1</span>, **(c + <span class="hljs-number">1</span>), <span class="hljs-keyword">sizeof</span>(c), <span class="hljs-keyword">sizeof</span>(&amp;c)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0x7fffffffdb08 0x7fffffffdb0c 0x7fffffffdb08 0x7fffffffdb10 8 8 8<br>0x7fffffffdb08 0x7fffffffdb0c 0x7fffffffdb08 0x7fffffffdb10 8 8 8<br>0x7fffffffdb10 0x7fffffffdb18 0x7fffffffdb10 0x7fffffffdb20 8 16 8<br></code></pre></td></tr></table></figure><blockquote><p><strong>由于题目可以看出来，第一个是数组，再看输出，a，a是一个数组，所以这里的a代表的是a数组的首地址，所以结果为a[0] (首地址)的地址；a + 1 是一个步长，int 类型步长是4个字节，所以为地址+4,为a[1]的地址；&amp;a是给a取地址，所以为a整个的地址，但表示还是用a的首地址；&amp;a  是指向整个数组的指针，当对这个指针执行  +1  操作时，它会根据整个数组的大小进行移动，所以移动8个字节；给a+1解引用，得到是a[1],即为8;sizeof是计算变量或类型的大小，一般单位为字节，此处为8字节；最后一个为指针，在64位系统中为8字节，32位为4字节。</strong></p></blockquote><blockquote><p><strong>第二个是数组指针，</strong> * b是取数组指针的第一个值，但这个值是&amp;a,是a的地址；所以给* <strong>b+1,结果是a的地址加一，即为加了四个字节；b 代表的是一个指向数组 a 的指针，所以是整个数组的地址；b + 1的话，就是给整个数组a的地址+1,它会根据整个数组的大小进行移动，所以移动8个字节；</strong> *(*b + 1)就是给a + 1再解引用；sizeof(*b) <strong>计算的是指针 b 指向的数组（即 a）的大小；sizeof(b) 返回的是指针 b 本身的大小，而b 是一个指向数组的指针，所以为8字节。</strong></p></blockquote><blockquote><p><strong>最后一个是指针数组，所以输出的是指向 c 数组的地址，c 的首地址是指向a的地址；c + 1为c的第二个元素的地址，即指向a + 1地址的地址；&amp;c 的类型为数组指针，即指向包含整个a的数组的指针；&amp;c + 1为在指向a这个数组的指针再走一步此时为16字节；解引用(c + 1)将得到 c[1]，即 a + 1，这是指向 a 数组中第二个元素（值为 8）的指针，继续解引用,所以会得到a[1],就是8；sizeof的c是整个地址的字节，这里一个a的地址为4,但c指向的a的地址，所以一个指向地址的地址为8个字节，所以指针数组字节大小为16；sizeof(&amp;c) 返回的是指向数组 c 的指针的大小，为8字节。</strong></p></blockquote><h1 id="9-嘻嘻哈哈，好玩好玩"><a href="#9-嘻嘻哈哈，好玩好玩" class="headerlink" title="9. 嘻嘻哈哈，好玩好玩"></a>9. 嘻嘻哈哈，好玩好玩</h1><p>在宏的魔法下，数字与文字交织，猜猜结果是什么？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) x *x</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) (a &gt; b) ? a : b;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT(x) printf(<span class="hljs-string">&quot;嘻嘻，结果你猜对了吗，包%d滴\n&quot;</span>, x);</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONCAT(a, b) a##b</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">CONCAT</span><span class="hljs-params">(x, <span class="hljs-number">1</span>)</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">CONCAT</span><span class="hljs-params">(y, <span class="hljs-number">2</span>)</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> max = MAX(SQUARE(x1 + <span class="hljs-number">1</span>), SQUARE(y2))<br>    PRINT(max)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">嘻嘻，结果你猜对了吗，包11滴<br></code></pre></td></tr></table></figure><p><strong>这里CONCAT会使x1 &#x3D; 5，y2 &#x3D; 3;定义没有加括号（应该为这么定义#define SQUARE(x) ((x) * (x))），所以这里会写成5 + 1 x 5 + 1 &#x3D; 11,令一个为9,max是判断谁更大，然后输出大的值即为11.</strong></p><h1 id="10-我写的排序最快"><a href="#10-我写的排序最快" class="headerlink" title="10. 我写的排序最快"></a>10. 我写的排序最快</h1><p>写一个 your_sort 函数，要求不能改动 main 函数里的代码，对 arr1 和 arr2 两个数组进行升序排序并剔除相同元素，最后将排序结果放入 result 结构体中。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-type">int</span> len1 = <span class="hljs-keyword">sizeof</span>(arr1) / <span class="hljs-keyword">sizeof</span>(arr1[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> len2 = <span class="hljs-keyword">sizeof</span>(arr2) / <span class="hljs-keyword">sizeof</span>(arr2[<span class="hljs-number">0</span>]);<br><br>    result result;<br>    your_sort(arr1, len1, arr2, len2, &amp;result);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; result.len; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, result.arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(result.arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">result</span><br>&#123;<br>  <span class="hljs-type">int</span> *arr;<br>  <span class="hljs-type">int</span> len;<br>&#125; result;<span class="hljs-comment">//定义结构体</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">your_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr1[], <span class="hljs-type">int</span> len1, <span class="hljs-type">int</span> arr2[], <span class="hljs-type">int</span> len2, result *result)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> str[<span class="hljs-number">19</span>], x = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len1; i++)<br>  &#123;<br>    str[x++] = arr1[i];<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len2; i++)<br>  &#123;<br>    str[x++] = arr2[i];<br>  &#125;<span class="hljs-comment">//将两个数组合并</span><br>  <span class="hljs-built_in">sort</span>(str, str + len1 + len2);<span class="hljs-comment">//排序</span><br>  result-&gt;arr = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>((len1 + len2) * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//分配动态内存</span><br>  <span class="hljs-keyword">if</span> (result-&gt;arr == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;error!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-type">int</span> x1 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || str[i] != str[i - <span class="hljs-number">1</span>])<span class="hljs-comment">//剔除相同元素</span><br>    &#123;<br>      result-&gt;arr[x1++] = str[i];<br>    &#125;<br>  &#125;<br>  result-&gt;len = x1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>&#125;;<br>  <span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>  <span class="hljs-type">int</span> len1 = <span class="hljs-built_in">sizeof</span>(arr1) / <span class="hljs-built_in">sizeof</span>(arr1[<span class="hljs-number">0</span>]);<br>  <span class="hljs-type">int</span> len2 = <span class="hljs-built_in">sizeof</span>(arr2) / <span class="hljs-built_in">sizeof</span>(arr2[<span class="hljs-number">0</span>]);<br><br>  result result;<br>  <span class="hljs-built_in">your_sort</span>(arr1, len1, arr2, len2, &amp;result);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; result.len; i++)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, result.arr[i]);<br>  &#125;<br>  <span class="hljs-built_in">free</span>(result.arr);<span class="hljs-comment">//释放多余的内存</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11-猜猜我是谁"><a href="#11-猜猜我是谁" class="headerlink" title="11. 猜猜我是谁"></a>11. 猜猜我是谁</h1><p>在指针的迷宫中，五个数字化身为神秘的符号，等待被逐一揭示。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">void</span> *a[] = &#123;(<span class="hljs-type">void</span> *)<span class="hljs-number">1</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">2</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">3</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">4</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *((<span class="hljs-type">char</span> *)a + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *(<span class="hljs-type">int</span> *)(<span class="hljs-type">char</span> *)a + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *((<span class="hljs-type">int</span> *)a + <span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, *((<span class="hljs-type">long</span> <span class="hljs-type">long</span> *)a + <span class="hljs-number">3</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *((<span class="hljs-type">short</span> *)a + <span class="hljs-number">4</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0<br>2<br>2<br>4<br>2<br></code></pre></td></tr></table></figure><blockquote><p>****&#x3D;&#x3D;void *a[] &#x3D; {(void *)1, (void <em>)2, (void <em>)3, (void <em>)4, (void <em>)5}; 定义了一个void类型的数组 其中每个元素都是void类型的值 即每个元素都是一个十六进制的整形，且为小端储存&#x3D;&#x3D;;<br>第一个这里你获取数据，但<code>(char *)a + 1</code>是a的首地址强制转化为char类型，由于char只占一个字节，+1并取得第二个字节，这里指针为8字节，所以一个数字为0.5个字节，00000000000000<code>01</code> -&gt; 000000000000<code>00</code>01,所以为0；<br>&#x3D;&#x3D;第二个表达式先将a转换为字符指针，然后再转换为整型指针，再解引用，此时为第一个数就是1&#x3D;&#x3D;,1 + 1就是2；</em></em></em></em><br>后面三个与第一个同理，3.转化为int类型，+2刚好是八字节，即2；<br>4.long long 为8字节，+3相当于走到数组第四个，即4；<br>5.short2字节，+4为8字节，所以到第二个，即2；</p></blockquote><h1 id="12-结构体变小写奇遇记"><a href="#12-结构体变小写奇遇记" class="headerlink" title="12. 结构体变小写奇遇记"></a>12. 结构体变小写奇遇记</h1><p>计算出 Node 结构体的大小，并解释以下代码的运行结果。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">data</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">double</span> b;<br>    <span class="hljs-type">short</span> c;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a;<span class="hljs-comment">//8字节</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">data</span> <span class="hljs-title">b</span>;</span><span class="hljs-comment">//8字节</span><br>    <span class="hljs-type">void</span> (*change)( <span class="hljs-keyword">struct</span> node *n);<span class="hljs-comment">//8字节</span><br>    <span class="hljs-type">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">0</span>];<span class="hljs-comment">//柔性数组，内存后续会分配。</span><br>&#125; Node;<br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(Node *node)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; node-&gt;<span class="hljs-built_in">string</span>[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)<br>        node-&gt;<span class="hljs-built_in">string</span>[i] = <span class="hljs-built_in">tolower</span>(node-&gt;<span class="hljs-built_in">string</span>[i]);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;WELCOME TO XIYOULINUX_GROUP!&quot;</span>;<br>    Node *P = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node) + (<span class="hljs-built_in">strlen</span>(s) + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br>    <span class="hljs-built_in">strcpy</span>(P-&gt;<span class="hljs-built_in">string</span>, s);<span class="hljs-comment">//将s复制给P-&gt;string</span><br>    P-&gt;change = func;<span class="hljs-comment">//将函数指针指向func</span><br>    P-&gt;change(P);<span class="hljs-comment">//此时将大写全部转化为小写。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, P-&gt;<span class="hljs-built_in">string</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Node *P = (Node *)malloc(sizeof(Node) + (strlen(s) + 1) * sizeof(char));</code>为柔性数组string分配内存空间。<br>结构体内存大小为<code>24</code>；</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">welcome to xiyoulinux_group!<br></code></pre></td></tr></table></figure><h1 id="13-GNU-Linux-选做"><a href="#13-GNU-Linux-选做" class="headerlink" title="13. GNU&#x2F;Linux (选做)"></a>13. GNU&#x2F;Linux (选做)</h1><p>注：嘿！你或许对Linux命令不是很熟悉，甚至没听说过Linux。<br>但别担心，这是选做题，了解Linux是加分项，不了解也不扣分哦！</p><pre><code>你知道 ls 命令的用法与 / . ~ 这些符号的含义吗？你知道 Linux 中权限 rwx 的含义吗？请问你还懂得哪些与 GNU/Linux 相关的知识呢~</code></pre><ul><li>ls 是一个用于列出目录内容的命令。常见用法包括：<blockquote><p><code>ls</code>：列出当前目录的文件和子目录。<br><code> ls -l</code>：以长格式显示文件和目录的详细信息，包括权限、拥有者、文件大小和修改时间。<br><code>ls -a</code>：显示所有文件，包括以.开头的隐藏文件。</p></blockquote></li><li></li></ul><blockquote><p>&#x2F;：根目录，所有文件和目录的起始点。<br>.：当前目录的表示。<br>..：上一级目录的表示。<br>~：当前用户的主目录的快捷方式。</p></blockquote><ul><li>在 Linux 中，文件和目录的权限由三部分组成：用户、组和其他用户，每部分可以有三种权限：</li></ul><blockquote><p>r（read）：读权限，允许查看文件内容。<br>w（write）：写权限，允许修改文件内容。<br>x（execute）：执行权限，允许执行文件（对目录来说，允许进入该目录）。<br>eg:rwxr-xr–</p></blockquote>]]></content>
    
    
    <summary type="html">一个人可以被毁灭，但不能被打败。</summary>
    
    
    
    
    <category term="C语言" scheme="https://xyz2781790037.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="纳新题" scheme="https://xyz2781790037.github.io/tags/%E7%BA%B3%E6%96%B0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>西邮Linux兴趣小组2023纳新面试题题解</title>
    <link href="https://xyz2781790037.github.io/2024/10/28/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842023%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://xyz2781790037.github.io/2024/10/28/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842023%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2024-10-28T13:33:36.000Z</published>
    <updated>2025-03-03T04:15:39.037Z</updated>
    
    <content type="html"><![CDATA[<p>学长寄语：长期以来，西邮Linux兴趣小组的面试题以难度之高名扬西邮校内。我们作为出题人也清楚的知道这份试题略有难度。请你动手敲一下代码。别担心，若有同学能完成一半的题目，就已经十分优秀。其次，相比于题目的答案，我们对你的思路和过程更感兴趣，或许你的答案略有瑕疵，但你正确的思路和对知识的理解足以为你赢得绝大多数的分数。最后，做题的过程也是学习和成长的过程，相信本试题对你更加熟悉的掌握C语言的一定有所帮助。祝你好运。我们东区逸夫楼FZ103见！</p><ul><li>本题目只作为西邮Linux兴趣小组2023纳新面试的有限参考。</li><li>为节省版面，本试题的程序源码省去了#include指令。</li><li>本试题中的程序源码仅用于考察C语言基础，不应当作为C语言「代码风格」的范例。</li><li>所有题目编译并运行于x86_64 GNU&#x2F;Linux环境。</li></ul><h1 id="0-鼠鼠我啊，要被祸害了"><a href="#0-鼠鼠我啊，要被祸害了" class="headerlink" title="0. 鼠鼠我啊，要被祸害了"></a>0. 鼠鼠我啊，要被祸害了</h1><blockquote><p>有1000瓶水，其中有一瓶有毒，小白鼠只要尝一点带毒的水，24小时<br>后就会准时死亡。至少要多少只小白鼠才能在24小时内鉴别出哪瓶水有毒？</p></blockquote><p><strong>这个题考察二进制，用0,1表示死和生，也是喝与没喝，如果有一个小鼠，它可以表示为0,1,也就是2瓶水，那两只为4瓶水，我们可以给每瓶水编号，从0到999。用二进制表示，这需要10位（因为2^10&#x3D;1024),即十只小鼠，每瓶水中位数是1,就让它喝，比如0001000101,让是1的小鼠喝水，24小时后看每只小鼠存活情况，就可以知道哪瓶水有毒了。</strong></p><h1 id="1-先预测一下"><a href="#1-先预测一下" class="headerlink" title="1. 先预测一下~"></a>1. 先预测一下~</h1><p>按照函数要求输入自己的姓名试试~</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *<span class="hljs-title function_">welcome</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 请你返回自己的姓名</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> *a = welcome();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, 我相信 %s 可以面试成功!\n&quot;</span>, a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *<span class="hljs-title function_">welcome</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> *name = <span class="hljs-string">&quot;hhh&quot;</span>;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> *a = welcome();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, 我相信 %s 可以面试成功!\n&quot;</span>, a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>当你执行 char * name &#x3D; “hhh”; 时，name 被赋值为指向字符串的首地址，即第一个字符 ‘h’ 的地址，通过这个指针，你可以访问整个字符串。这里返回的是第一个h的地址，所以当后面使用 %s 来读取整个字符串。</strong></em></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *<span class="hljs-title function_">welcome</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hhh&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *<span class="hljs-title function_">welcome</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> name[] = <span class="hljs-string">&quot;hhh&quot;</span>;<br>    <span class="hljs-keyword">return</span> name;<br></code></pre></td></tr></table></figure><p>   这是另外的两个方法。</p><h1 id="2-欢迎来到Linux兴趣小组"><a href="#2-欢迎来到Linux兴趣小组" class="headerlink" title="2. 欢迎来到Linux兴趣小组"></a>2. 欢迎来到Linux兴趣小组</h1><p>有趣的输出，为什么会这样子呢~</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> *ptr0 = <span class="hljs-string">&quot;Welcome to Xiyou Linux!&quot;</span>;<br>    <span class="hljs-type">char</span> ptr1[] = <span class="hljs-string">&quot;Welcome to Xiyou Linux!&quot;</span>;<br>    <span class="hljs-keyword">if</span> (*ptr0 == *ptr1) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, Linux Group - 2%d&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&quot;</span>)));<br>    &#125;<br>    <span class="hljs-type">int</span> diff = ptr0 - ptr1;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pointer Difference: %d\n&quot;</span>, diff);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Hello, Linux Group - 2023<br>Pointer Difference: 1431667956<br></code></pre></td></tr></table></figure><p><strong>if语句内指针解引用前一个指向常量字符串的‘w’。ptr1是数组，数组名即是首元素的地址，解引用ptr1是字符数组（字符串）的‘w’,都是字符’w’，执行if下面的语句。此处为printf函数嵌套,用到了printf的返回值，printf返回值为打印元素的个数.并且进入嵌套时从嵌套外进去嵌套，读取时从最内侧的开始向外侧读取,由于最里面没有东西，所以返回值是0，最外面的那个看的是里面printf的字符个数，一共有23个字符，所以最后会打印2023。后面是两个地址相减，虽然两个解引用的东西一样，但地址不一样。所以值是随机的。</strong></p><h1 id="3-一切都翻倍了吗"><a href="#3-一切都翻倍了吗" class="headerlink" title="3. 一切都翻倍了吗"></a>3. 一切都翻倍了吗</h1><blockquote><p>请尝试解释一下程序的输出。<br>请谈谈对sizeof()和strlen()的理解吧。<br>什么是sprintf()，它的参数以及返回值又是什么呢？</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> arr[] = &#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>&#125;, str[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">short</span> num = <span class="hljs-number">520</span>;<br>    <span class="hljs-type">int</span> num2 = <span class="hljs-number">1314</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\t%zu\t%zu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(*&amp;arr), <span class="hljs-keyword">sizeof</span>(arr + <span class="hljs-number">0</span>),<br>           <span class="hljs-keyword">sizeof</span>(num = num2 + <span class="hljs-number">4</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;0x%x&quot;</span>, num) == num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\t%zu\n&quot;</span>, <span class="hljs-built_in">strlen</span>(&amp;str[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>), <span class="hljs-built_in">strlen</span>(arr + <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">7       8       2<br>0<br>4       5<br></code></pre></td></tr></table></figure><p>第一个是对arr数组先取地址，然后再进行解引用，得到的是数组的大小，这里有七个char类型的字符，所以这里大小是7;这里是arr + 0，就是arr的首地址，这里是指针<br>num是short类型所以是两个字节；后面用到了sprintf的相关知识，这里是将num转化为16进制然后再写入str这个数组，由于与num不相等，所以这里输出为0；后面+1,从第二个地址开始算，一共5个字符，所以为4,arr数组有\0前面有5个元素，所以为5。</p><blockquote><p><a href="https://blog.csdn.net/Colorful___/article/details/132766101?ops_request_misc=%257B%2522request%255Fid%2522%253A%25229CD5AD7E-FF7B-4B49-9D85-397786DAFCC4%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=9CD5AD7E-FF7B-4B49-9D85-397786DAFCC4&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-132766101-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=sprintf&spm=1018.2226.3001.4187">sprintf详解</a></p></blockquote><h1 id="4-奇怪的输出"><a href="#4-奇怪的输出" class="headerlink" title="4. 奇怪的输出"></a>4. 奇怪的输出</h1><p>程序的输出结果是什么？解释一下为什么出现该结果吧~</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> a = <span class="hljs-number">64</span> &amp; <span class="hljs-number">127</span>;<span class="hljs-comment">//01000000和01111111 -&gt; 01000000 -&gt; 64</span><br>    <span class="hljs-type">char</span> b = <span class="hljs-number">64</span> ^ <span class="hljs-number">127</span>;<span class="hljs-comment">// 00111111 -&gt; 63</span><br>    <span class="hljs-type">char</span> c = <span class="hljs-number">-64</span> &gt;&gt; <span class="hljs-number">6</span>;<span class="hljs-comment">//11000000 -&gt; 11111111 -&gt; -1;</span><br>    <span class="hljs-type">char</span> ch = a + b - c;<span class="hljs-comment">//计算答案为128,char类型范围为-128 ～ 127,-&gt; -128</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d b = %d c = %d\n&quot;</span>, a, b, c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch = %d\n&quot;</span>, ch);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/MQ0522/article/details/129716834?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522D3D1213C-6F4E-4CD4-8CC6-971C8AAA9F9C%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=D3D1213C-6F4E-4CD4-8CC6-971C8AAA9F9C&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-129716834-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6&spm=1018.2226.3001.4187">位运算详解</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">a = 64 b = 63 c = -1<br>ch = -128<br></code></pre></td></tr></table></figure><h1 id="5-乍一看就不想看的函数"><a href="#5-乍一看就不想看的函数" class="headerlink" title="5. 乍一看就不想看的函数"></a>5. 乍一看就不想看的函数</h1><blockquote><p>“人们常说互联网凛冬已至，要提高自己的竞争力，可我怎么卷都卷不过别人，只好用一些奇技淫巧让我的代码变得高深莫测。”</p></blockquote><p>这个func()函数的功能是什么？是如何实现的？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!a) <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">return</span> func((a &amp; b) &lt;&lt; <span class="hljs-number">1</span>, a ^ b);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">4</span>, b = <span class="hljs-number">9</span>, c = <span class="hljs-number">-7</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, func(a, func(b, c)));<span class="hljs-comment">//4 + 9 - 7 = 6;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">6<br></code></pre></td></tr></table></figure><p><strong>这个函数是计算两个值的加法运算，<code>&amp;：计算进位</code>；<code>^：计算不带进位的和</code>。a &amp; b取相同元素， &lt;&lt; 1 相当于进位，a ^ b取不同元素，通过不断的递归，直到不再进位，最终求出加法最后的结果。</strong></p><h1 id="6-自定义过滤"><a href="#6-自定义过滤" class="headerlink" title="6. 自定义过滤"></a>6. 自定义过滤</h1><p>请实现filter()函数：过滤满足条件的数组元素。</p><p>提示：使用函数指针作为函数参数并且你需要为新数组分配空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*Predicate)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">int</span> *<span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>, <span class="hljs-type">int</span> length, Predicate predicate,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> *resultLength)</span>; <span class="hljs-comment">/*补全函数*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isPositive</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123; <span class="hljs-keyword">return</span> num &gt; <span class="hljs-number">0</span>; &#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[] = &#123;<span class="hljs-number">-3</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-type">int</span> length = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> resultLength;<br>    <span class="hljs-type">int</span> *filteredNumbers = filter(<span class="hljs-built_in">array</span>, length, isPositive,<br>                                  &amp;resultLength);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; resultLength; i++) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, filteredNumbers[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(filteredNumbers);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*Predicate)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">int</span> *<span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>, <span class="hljs-type">int</span> length, Predicate predicate, <span class="hljs-type">int</span> *resultLength)</span><br>&#123;<br>    <span class="hljs-type">int</span> *filteredNumbers = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(length * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (filteredNumbers == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;error&quot;</span>;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (predicate(<span class="hljs-built_in">array</span>[i]))<span class="hljs-comment">//判断数是不是大于0</span><br>        &#123;<br>            filteredNumbers[x++] = <span class="hljs-built_in">array</span>[i];<br>        &#125;<br>    &#125;<br>    *resultLength = x;<br>    <span class="hljs-keyword">return</span> filteredNumbers;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">isPositive</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123; <span class="hljs-keyword">return</span> num &gt; <span class="hljs-number">0</span>; &#125;<br></code></pre></td></tr></table></figure><h1 id="7-静…态…"><a href="#7-静…态…" class="headerlink" title="7. 静…态…"></a>7. 静…态…</h1><blockquote><p>如何理解关键字static？<br>static与变量结合后有什么作用？<br>static与函数结合后有什么作用？<br>static与指针结合后有什么作用？<br>static如何影响内存分配?</p></blockquote><blockquote><p><strong>static是 C&#x2F;C++中的关键字之一，是常见的函数与变量的修饰符，它常被用来控制变量的存储方式和作用范围。 <code>1.</code>如果静态变量没有显式初始化，编译器会自动将其初始化为零,用 static 声明的变量在程序的整个运行期间存在。<code>2.</code>无论变量是在函数内还是外部，静态变量在程序开始时分配内存，并在程序结束时释放。<code>3.</code>静态变量通常存储在静态区，这意味着它们不会随着函数调用的结束而被销毁。<code>4.</code>在函数内部声明的静态变量，其作用域仅限于该函数，但生命周期却是全程有效的,全局静态变量的作用域限制在定义它的文件中，其他文件无法访问。</strong></p></blockquote><ul><li>修饰局部变量（称为静态局部变量）</li><li>修饰全局变量（称为静态全局变量）</li><li>修饰函数（称为静态函数）<blockquote><p><a href="https://blog.csdn.net/weixin_45031801/article/details/134215425?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522B7C35F5F-27DA-4443-AD82-B4D3E06A8A0C%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=B7C35F5F-27DA-4443-AD82-B4D3E06A8A0C&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-134215425-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=static&spm=1018.2226.3001.4187">static的详解</a></p></blockquote></li></ul><h1 id="8-救命！指针！"><a href="#8-救命！指针！" class="headerlink" title="8. 救命！指针！"></a>8. 救命！指针！</h1><blockquote><p>数组指针是什么？指针数组是什么？函数指针呢？用自己的话说出来更好哦，下面数据类型的含义都是什么呢？</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> (*p)[<span class="hljs-number">10</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> (*f1(<span class="hljs-type">int</span>))(<span class="hljs-type">int</span>*, <span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><p><strong><em>第一个是数组指针，是指向数组的指针，里面存放的是地址；<br>第二个是常量指针数组，是一个数组，其中每个元素都是指向变量的指针，且值无法更改。<br>第三个是函数指针，返回的函数将返回一个 int 类型的值，并接受一个 int</em> 和一个 int 类型的参数。</strong>*</p><h1 id="9-咋不循环了"><a href="#9-咋不循环了" class="headerlink" title="9. 咋不循环了"></a>9. 咋不循环了</h1><p>程序直接运行，输出的内容是什么意思？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d]\n&quot;</span>, argc);<br>    <span class="hljs-keyword">while</span> (argc) &#123;<br>      ++argc;<br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-1</span>, j = argc, k = <span class="hljs-number">1</span>;<br>    i++ &amp;&amp; j++ || k++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d, j = %d, k = %d\n&quot;</span>, i, j, k);<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<span class="hljs-comment">//return EXIT_SUCCESS相当于return 0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;argv[]是命令行参数,argc是从命令行传给程序的参数个数(至少为1)&#x3D;&#x3D;<br>在没有传入参数时 argc &#x3D; 1,先给argc加，会让他从1加到最大，直到溢出为-2147483648,然后会继续执行，直到argc &#x3D; 0，跳出while循环。i++,i &#x3D; 0,j &#x3D; argc &#x3D; 0,j++,j &#x3D; 1,k++,k &#x3D; 2.</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">i = 0, j = 1, k = 2<br></code></pre></td></tr></table></figure><h1 id="10-到底是不是TWO"><a href="#10-到底是不是TWO" class="headerlink" title="10. 到底是不是TWO"></a>10. 到底是不是TWO</h1><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CAL(a) a * a * a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAGIC_CAL(a, b) CAL(a) + CAL(b)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-type">int</span> nums = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-number">16</span> / CAL(<span class="hljs-number">2</span>) == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I&#x27;m TWO(ﾉ&gt;ω&lt;)ﾉ\n&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">int</span> nums = MAGIC_CAL(++nums, <span class="hljs-number">2</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, nums);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是宏定义没加括号，所以变成了</p><blockquote><p>16 &#x2F; 2 * 2 * 2 &#x3D; 32</p></blockquote><p>所以这里不会执行I’m TWO(ﾉ&gt;ω&lt;)ﾉ，else里重新定义了一个新的nums，&#x3D;&#x3D;出了else,生命周期就结束了&#x3D;&#x3D;，所以不会影响结果，即nums &#x3D; 1;</p><h1 id="11-克隆困境"><a href="#11-克隆困境" class="headerlink" title="11. 克隆困境"></a>11. 克隆困境</h1><p>试着运行一下程序，为什么会出现这样的结果？</p><blockquote><p>直接将s2赋值给s1会出现哪些问题，应该如何解决？请写出相应代码。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initializeStudent</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student *student, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,</span><br><span class="hljs-params">                       <span class="hljs-type">int</span> age)</span> &#123;<br>    student-&gt;name = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(name) + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">strcpy</span>(student-&gt;name, name);<br>    student-&gt;age = age;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s1</span>, <span class="hljs-title">s2</span>;</span><br>    initializeStudent(&amp;s1, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">18</span>);<br>    initializeStudent(&amp;s2, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">28</span>);<br>    s1 = s2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s1的姓名: %s 年龄: %d\n&quot;</span>, s1.name, s1.age);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s2的姓名: %s 年龄: %d\n&quot;</span>, s2.name, s2.age);<br>    <span class="hljs-built_in">free</span>(s1.name);<br>    <span class="hljs-built_in">free</span>(s2.name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">Student s3 = s1;<br>  s1 = s2;<br>  s2 = s3;<br></code></pre></td></tr></table></figure><p><strong>直接将s1 &#x3D; s2，会使s1本来指向的内存空间，使其无法正常释放。</strong></p><h1 id="12-你好，我是内存"><a href="#12-你好，我是内存" class="headerlink" title="12. 你好，我是内存"></a>12. 你好，我是内存</h1><p>作为一名合格的C-Coder，一定对内存很敏感吧~来尝试理解这个程序吧！</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">structure</span> &#123;</span><br>    <span class="hljs-type">int</span> foo;<span class="hljs-comment">//占四个字节</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>      <span class="hljs-type">int</span> integer;<br>      <span class="hljs-type">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">11</span>];<br>      <span class="hljs-type">void</span> *pointer;<br>    &#125; node;<span class="hljs-comment">//偏移为4，共16字节</span><br>    <span class="hljs-type">short</span> bar;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> baz;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">7</span>];<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">0x590ff23c</span>, <span class="hljs-number">0x2fbc5a4d</span>, <span class="hljs-number">0x636c6557</span>, <span class="hljs-number">0x20656d6f</span>,<br>                 <span class="hljs-number">0x58206f74</span>, <span class="hljs-number">0x20545055</span>, <span class="hljs-number">0x6577202c</span>, <span class="hljs-number">0x6d6f636c</span>,<br>                 <span class="hljs-number">0x6f742065</span>, <span class="hljs-number">0x79695820</span>, <span class="hljs-number">0x4c20756f</span>, <span class="hljs-number">0x78756e69</span>,<br>                 <span class="hljs-number">0x6f724720</span>, <span class="hljs-number">0x5b207075</span>, <span class="hljs-number">0x33323032</span>, <span class="hljs-number">0x7825005d</span>,<br>                 <span class="hljs-number">0x636c6557</span>, <span class="hljs-number">0x64fd6d1d</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, ((<span class="hljs-keyword">struct</span> structure *)arr)-&gt;node.<span class="hljs-built_in">string</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>union 的对齐数是由其成员中<code>最大的对齐</code>要求决定的。所以此时的union 的对齐数是8,中间还留了4个字节，从后开始转化，即<code>0x636c6557</code>，此时为小端序，所以是<code>57</code> <code>65</code> <code>6c</code> <code>63</code>-&gt; W e l c直到<code>0x7825005d</code>,的<code>5d</code>  ,<code>00</code> 结束。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Welcome to XUPT , welcome to Xiyou Linux Group [2023]<br></code></pre></td></tr></table></figure><h1 id="13-GNU-Linux-选做"><a href="#13-GNU-Linux-选做" class="headerlink" title="13. GNU&#x2F;Linux (选做)"></a>13. GNU&#x2F;Linux (选做)</h1><blockquote><p>注：嘿！你或许对Linux命令不是很熟悉，甚至你没听说过Linux。但别担心，这是选做题，了解Linux是加分项，但不了解也不扣分哦！<br>你知道cd命令的用法与 &#x2F; . ~ 这些符号的含义吗？</p></blockquote><blockquote><p>1.切换到指定目录：<code>cd /路径</code><br>2.返回上一级目录：<code>cd  ..</code><br>3.返回上上一级目录 ：<code>cd ../..</code><br>4.切换到当前用户的主目录：<code>cd ~</code><br>5.切换到之前的目录：<code>cd -</code></p></blockquote>]]></content>
    
    
    <summary type="html">不论对任何困难都决不屈服！</summary>
    
    
    
    
    <category term="C语言" scheme="https://xyz2781790037.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="纳新题" scheme="https://xyz2781790037.github.io/tags/%E7%BA%B3%E6%96%B0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>西邮Linux兴趣小组2022纳新面试题题解</title>
    <link href="https://xyz2781790037.github.io/2024/10/28/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842022%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://xyz2781790037.github.io/2024/10/28/%E8%A5%BF%E9%82%AELinux%E5%85%B4%E8%B6%A3%E5%B0%8F%E7%BB%842022%E7%BA%B3%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2024-10-28T12:33:36.000Z</published>
    <updated>2025-03-03T04:15:28.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学长寄语：长期以来，西邮linux兴趣小组的面试题以难度之高名扬西邮校内。我们作为出题人也清楚的知道这份试题略有难度。请你动手敲一敲代码。别担心，若有同学能完成一半的题目，就已经十分优秀。其次，相比于题目的答案，我们对你的思路和过程更感兴趣，或许你的答案略有瑕疵，但你正确的思路和对知识的理解足以为你赢得绝大多数的分数。最后，做题的过程也是学习和成长的过程，相信本试题对你更加熟悉地掌握C语言一定有所帮助。祝你好运。我们东区逸夫楼FZ103见！</p></blockquote><ul><li>本题目只作为西邮Linux兴趣小组2022纳新面试的有限参考。</li><li>为节省版面，本试题的程序源码省去了#include指令。</li><li>本试题中的程序源码仅用于考察C语言基础，不应当作为C语言「代码风格」的范例。</li><li>题目难度随机排列。</li><li>所有题目编译并运行于x86_64 GNU&#x2F;Linux环境。</li></ul><h1 id="0-我的计算器坏了？！"><a href="#0-我的计算器坏了？！" class="headerlink" title="0. 我的计算器坏了？！"></a>0. 我的计算器坏了？！</h1><blockquote><p>2^10 &#x3D; 1024 对应于十进制的4位，那么 2^10000 对应于十进制的多少位呢?</p></blockquote><p>  <strong>2^10 &#x3D; 1024,就是lg 2^n &#x3D; n * lg 2所以公式为<code>[nlg2] + 1</code>，n &#x3D; 10000，大概为3011；</strong></p><h1 id="1-printf还能这么玩？"><a href="#1-printf还能这么玩？" class="headerlink" title="1. printf还能这么玩？"></a>1. printf还能这么玩？</h1><p>   尝试着解释程序的输出。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> ((<span class="hljs-number">3</span> + <span class="hljs-number">2</span> &lt; <span class="hljs-number">2</span>) &gt; (<span class="hljs-number">3</span> + <span class="hljs-number">2</span> &gt; <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to Xiyou Linux Group\n&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Xiyou Linux Group - 2%d&quot;</span>, <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><p>3 + 2 &#x3D; 5 &lt; 2为假，所以是0, 5 &gt; 2为真，所以是1,0 &lt; 1,所以执行else<br>此处为printf函数嵌套,用到了printf的返回值，printf返回值为打印元素的个数.由于最里面没有东西，所以返回值是0，最外面的那个看的是里面printf的字符个数，一共有22个字符，所以最后会打印2022。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Xiyou Linux Group - 2022<br></code></pre></td></tr></table></figure><h1 id="2-你好你好你好呀！"><a href="#2-你好你好你好呀！" class="headerlink" title="2. 你好你好你好呀！"></a>2. 你好你好你好呀！</h1><ul><li>程序的输出有点奇怪，请尝试解释一下程序的输出吧。</li><li>请谈谈对<code>sizeof()</code>及<code>strlen()</code>的理解吧。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> p0[] = <span class="hljs-string">&quot;Hello,Linux&quot;</span>;<br>    <span class="hljs-type">char</span> *p1 = <span class="hljs-string">&quot;Hello,Linux&quot;</span>;<br>    <span class="hljs-type">char</span> p2[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;Hello,Linux&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p0 == p1: %d, strcmp(p0, p2): %d\n&quot;</span>, p0 == p1, <span class="hljs-built_in">strcmp</span>(p0, p2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p0): %zu, sizeof(p1): %zu, sizeof(*p2): %zu\n&quot;</span>,<br>           <span class="hljs-keyword">sizeof</span>(p0), <span class="hljs-keyword">sizeof</span>(p1), <span class="hljs-keyword">sizeof</span>(*p2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strlen(p0): %zu, strlen(p1): %zu\n&quot;</span>, <span class="hljs-built_in">strlen</span>(p0), <span class="hljs-built_in">strlen</span>(p1));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">p0 == p1: 0, strcmp(p0, p2): -1<br>sizeof(p0): 12, sizeof(p1): 8, sizeof(*p2): 1<br>strlen(p0): 11, strlen(p1): 11<br></code></pre></td></tr></table></figure><p>*<strong>这里的p0是一个数组，所以此处p0代表的是首地址，p1也是地址，所以此处地址是不一样的，输出0.后面用strcmp函数，比较，两者一样，但p2的结尾没有以\0结束，所以p2大于p0，结果为0；<br>sizeof(p0)，是数组，大小为元素数，即12；p1为指针，所以大小为8；<em>p2在这里表示首地址指向的字符‘H’，所以为1；.strlen是计算字符串长度的，遇到\0结束，&#x3D;&#x3D;返回不包括\0&#x3D;&#x3D;，所以p0为11,p1也为11.</em></strong></p><h2 id="3-换个变量名不行吗？"><a href="#3-换个变量名不行吗？" class="headerlink" title="3. 换个变量名不行吗？"></a>3. 换个变量名不行吗？</h2><p>请结合本题，分别谈谈你对C语言中「全局变量」和「局部变量」的「生命周期」理解。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    a += <span class="hljs-number">1</span>;<br>    &#123;<br>        <span class="hljs-type">int</span> a = a + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    test();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a= %d\n&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">a = 32768<br>a = 2<br>a = 3<br></code></pre></td></tr></table></figure><p><strong>因为在 int a &#x3D; a + 1在作用域中， a 是未初始化的，&#x3D;&#x3D;可能会导致随机值被打印&#x3D;&#x3D;，出了作用域，a被销毁（生命结束）；a +&#x3D; 1,a &#x3D; 2,函数外面打印2,main函数里没有定义a,所以用全局变量，即为3；</strong></p><h1 id="4-内存对不齐"><a href="#4-内存对不齐" class="headerlink" title="4. 内存对不齐"></a>4. 内存对不齐</h1><p><code>union</code>与<code>struct</code>各有什么特点呢，你了解他们的内存分配模式吗。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    <span class="hljs-type">long</span> l;<br>    <span class="hljs-type">int</span> i[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">char</span> c;<br>&#125; UNION;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> like;<span class="hljs-comment">//4字节</span><br>    UNION coin;<span class="hljs-comment">//24字节，但要从8的倍数开始对齐，即第八个开始。</span><br>    <span class="hljs-type">double</span> collect;<span class="hljs-comment">//8字节，刚好从32开始对齐。</span><br>&#125; STRUCT;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof (UNION) = %zu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(UNION)); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof (STRUCT) = %zu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(STRUCT));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sizeof (UNION) = 24<br>sizeof (STRUCT) = 40<br></code></pre></td></tr></table></figure><blockquote><ul><li><strong>union 共用一段内存空间，内存大小就是最大成员的大小，但必须按照最大对齐数的整数倍来安排内存。long在这里为8,i为20,c 为1,最大为20,但要为8的倍数，所以是24；</strong></li><li><strong>结构体大小为所有成员之和，且要有对齐数，所以为40;</strong></li></ul></blockquote><h1 id="5-Bitwise"><a href="#5-Bitwise" class="headerlink" title="5. Bitwise"></a>5. Bitwise</h1><ul><li>请使用纸笔推导出程序的输出结果。</li><li>请谈谈你对位运算的理解。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a = <span class="hljs-number">4</span> | <span class="hljs-number">7</span>;<span class="hljs-comment">//0100和0111 -&gt; 0111</span><br>    a &lt;&lt;= <span class="hljs-number">3</span>;<span class="hljs-comment">//0111000 -&gt; 56</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> b = <span class="hljs-number">5</span> &amp; <span class="hljs-number">7</span>;<span class="hljs-comment">//0101和0111 -&gt; 0101</span><br>    b &gt;&gt;= <span class="hljs-number">3</span>;<span class="hljs-comment">//0000000 -&gt; 0</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c = <span class="hljs-number">6</span> ^ <span class="hljs-number">7</span>;<span class="hljs-comment">//0110和0111 -&gt; 0001</span><br>    c = ~c;<span class="hljs-comment">//00000001 -&gt; 11111110 -&gt; -2 -&gt; 254</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> d = (a ^ c) &lt;&lt; <span class="hljs-number">3</span>;<span class="hljs-comment">//11000110000 -&gt; 1584 -&gt; (char)48</span><br>    <span class="hljs-type">signed</span> <span class="hljs-type">char</span> e = <span class="hljs-number">-63</span>;<span class="hljs-comment">//11000001</span><br>    e &lt;&lt;= <span class="hljs-number">2</span>;<span class="hljs-comment">//1100000100 -&gt; 772 -&gt; 4 -&gt; 0x4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: %d, b: %d, c: %d, d: %d\n&quot;</span>, a, b, c, (<span class="hljs-type">char</span>)d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;e: %#x\n&quot;</span>, e);<span class="hljs-comment">//%#x是一个格式说明符，用于printf函数来输出整数值的十六进制,并确保输出的十六进制数前面带有0x前缀。</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">a: 56, b: 0, c: 254, d: 48<br>e: 0x4<br></code></pre></td></tr></table></figure><h1 id="6-英译汉"><a href="#6-英译汉" class="headerlink" title="6. 英译汉"></a>6. 英译汉</h1><p>请说说下面数据类型的含义，谈谈<code>const</code>的作用。</p><ol><li><code>char *const p</code>。</li><li><code>char const *p</code>。</li><li><code>const char *p</code>。</li></ol><p> 1为指针常量，它的地址无法更改，但值可以更改。<br> 2,3为常量指针，指针可更改，但值不可更改。</p><blockquote><p>const的作用：<br>1.修饰局部变量<br>2.常量指针与指针常量<br>3.修饰函数的参数<br>4.修饰函数的返回值<br>5.修饰全局变量</p></blockquote><blockquote><p><a href="http://blog.csdn.net/xingjiarong/article/details/47282255">const详解</a></p></blockquote><h1 id="7-汉译英"><a href="#7-汉译英" class="headerlink" title="7. 汉译英"></a>7. 汉译英</h1><p>请用变量<code>p</code>给出下面的定义:</p><ol><li>含有10个指向<code>int</code>的指针的数组。</li><li>指向含有10个<code>int</code>数组的指针。</li><li>含有3个「指向函数的指针」的数组，被指向的函数有1个<code>int</code>参数并返回<code>int</code>。</li></ol><p><code>int* arr[10];</code><br><code>int (*a)[10];</code><br><code>int (*p[3])(int);</code><br><strong>下来给个代码例子</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 被指向的函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a * b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">subtract</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a - b;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建一个指向函数的指针数组// 定义函数类型</span><br>    <span class="hljs-type">int</span> (*a[<span class="hljs-number">3</span>])(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) = &#123; add, multiply, subtract &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-混乱中建立秩序"><a href="#8-混乱中建立秩序" class="headerlink" title="8. 混乱中建立秩序"></a>8. 混乱中建立秩序</h1><p>你对排序算法了解多少呢?<br>请谈谈你所了解的排序算法的思想、稳定性、时间复杂度、空间复杂度。</p><p>提示：动动你的小手敲出来更好哦~</p><blockquote><p>冒泡<br>稳定性<br>冒泡排序是稳定的排序算法。因为相等的元素不会交换位置。<br>时间复杂度:<br>最优时间复杂度：O(n)（当数列已经有序时）<br>最坏时间复杂度：O(n^2)<br>平均时间复杂度：O(n^2)<br>空间复杂度:冒泡排序是原地排序算法，空间复杂度为 O(1)。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">bubblesort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>选择<br>稳定性:选择排序是不稳定的排序算法。因为相同元素在排序过程中可能会改变相对位置。<br>时间复杂度:平均时间复杂度：O(n^2)<br>空间复杂度:选择排序是原地排序算法，空间复杂度为 O(1)。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j])<br>            &#123;<br>                swap(arr[i], arr[j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>快速<br>稳定性：不稳定的排序算法。因为相同元素在排序过程中可能会改变相对位置。<br>时间复杂度<br>最优时间复杂度：O(n log n)<br>最坏时间复杂度：O(n^2)（当选择的基准元素是最大或最小值时）<br>平均时间复杂度：O(n log n)<br>空间复杂度<br>最优空间复杂度：O(log n)（递归调用栈）<br>最坏空间复杂度：O(n)（当每次划分极不平衡时)<br>平均空间复杂度：O(log n)</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (left &gt; right)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i = left, j = right;<br>    <span class="hljs-type">int</span> temp = arr[i];<br>    <span class="hljs-keyword">while</span> (i != j)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= temp)<br>        &#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= temp)<br>        &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>        &#123;<br>            swap(arr[i], arr[j]);<br>        &#125;<br>    &#125;<br>    swap(arr[left], arr[i]);<br>    quicksort(arr, left, i - <span class="hljs-number">1</span>);<br>    quicksort(arr, i + <span class="hljs-number">1</span>, right);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-手脑并用"><a href="#9-手脑并用" class="headerlink" title="9. 手脑并用"></a>9. 手脑并用</h1><p>请实现ConvertAndMerge函数：<br>拼接输入的两个字符串，并翻转拼接后得到的新字符串中所有字母的大小写。</p><p>提示:你需要为新字符串分配空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* <span class="hljs-title function_">convertAndMerge</span><span class="hljs-params">(<span class="hljs-comment">/*补全签名*/</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> words[<span class="hljs-number">2</span>][<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&quot;Welcome to Xiyou &quot;</span>, <span class="hljs-string">&quot;Linux Group 2022&quot;</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, words[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, words[<span class="hljs-number">1</span>]);<br>    <span class="hljs-type">char</span> *str = convertAndMerge(words);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str = %s\n&quot;</span>, str);<br>    <span class="hljs-built_in">free</span>(str);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码如下：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* <span class="hljs-title function_">convertAndMerge</span><span class="hljs-params">(<span class="hljs-type">char</span> words[<span class="hljs-number">2</span>][<span class="hljs-number">20</span>])</span><br>&#123;<br>    <span class="hljs-type">int</span> len;<br>    len = <span class="hljs-built_in">strlen</span>(words[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">strlen</span>(words[<span class="hljs-number">1</span>]);<br>    <span class="hljs-type">char</span>* arr = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * (len + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">strcpy</span>(arr,words[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">strcat</span>(arr,words[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">islower</span>(arr[i]))<br>        &#123;<br>            arr[i] -= <span class="hljs-number">32</span>;<span class="hljs-comment">//arr[i] = toupper(arr[i]);</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isupper</span>(arr[i]))<br>        &#123;<br>            arr[i] += <span class="hljs-number">32</span>;<span class="hljs-comment">//arr[i] = tolower(arr[i]);</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10-给你我的指针，访问我的心声"><a href="#10-给你我的指针，访问我的心声" class="headerlink" title="10. 给你我的指针，访问我的心声"></a>10. 给你我的指针，访问我的心声</h1><p>程序的输出有点奇怪，请尝试解释一下程序的输出吧。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-type">int</span> *temp = *(arr + i);<br>        <span class="hljs-keyword">for</span> (; temp &lt; arr[<span class="hljs-number">5</span>]; temp++) *temp = a++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>, arr[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里是地址没有变，而是将a的值放在这块地址，而这块地址代表的就是二维数组的值。这里arr的首地址为<code>0x7fffffffdac0</code>,而arr[5]的地址为<code>0x7fffffffdb24</code>中间差值正好为100,即25个int类型的数字，*temp &#x3D; a &#x3D; 0，一直加到4,但for循环继续执行，后面会加25 - 5 &#x3D; 20 次，a就加到了25,下次地址就是25 — 29，这次地址差了15,继续到45,然后加10.加5,所以一直到75,但二维数组的值就为：</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0       1       2       3       4       25      26      27      28      29      45      46      47      48      49      60      61    62       63      64      70      71      72      73      74<br></code></pre></td></tr></table></figure><h1 id="11-奇怪的参数"><a href="#11-奇怪的参数" class="headerlink" title="11. 奇怪的参数"></a>11. 奇怪的参数</h1><p>你了解argc和argv吗？<br>直接运行程序argc的值为什么是1？<br>程序会出现死循环吗？</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc = %d\n&quot;</span>, argc);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        argc++;<br>        <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, (<span class="hljs-type">char</span> *)argv[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;argv[]是命令行参数,argc是从命令行传给程序的参数个数(至少为1)&#x3D;&#x3D; 在没有传入参数时 argc &#x3D; 1;<br>argc会一直增加直到溢出为负数，此时输出结果为程序的路径名。</strong></p><h1 id="12-奇怪的字符"><a href="#12-奇怪的字符" class="headerlink" title="12. 奇怪的字符"></a>12. 奇怪的字符</h1><p>程序的输出有点奇怪，请尝试解释一下程序的输出吧。</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-type">int</span> data1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">0x636c6557</span>, <span class="hljs-number">0x20656d6f</span>, <span class="hljs-number">0x58206f74</span>&#125;,<br>                       &#123;<span class="hljs-number">0x756f7969</span>, <span class="hljs-number">0x6e694c20</span>, <span class="hljs-number">0x00000000</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> data2[] = &#123;<span class="hljs-number">0x47207875</span>, <span class="hljs-number">0x70756f72</span>, <span class="hljs-number">0x32303220</span>, <span class="hljs-number">0x00000a32</span>&#125;;<br>    <span class="hljs-type">char</span> *a = (<span class="hljs-type">char</span> *)data1;<br>    <span class="hljs-type">char</span> *b = (<span class="hljs-type">char</span> *)data2;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-built_in">strcpy</span>(buf, a);<span class="hljs-comment">//把a放进buf</span><br>    <span class="hljs-built_in">strcat</span>(buf, b);<span class="hljs-comment">//把b和a连接起来</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n&quot;</span>, buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>个人基本为小端序，<code>char *a = (char *)data1</code>将这里转化为一个字节，即两个数字，*a获取data1的首地址并一个一个转化为字符形式，0x<code>63</code> <code>6c</code> <code>65</code> <code>57</code> -&gt; <code>57</code> <code>65</code> <code>6c</code> <code>63</code> -&gt; <code>W e l c</code>,最后形成字符串。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Welcome to Xiyou Linux Group 2022 <br></code></pre></td></tr></table></figure><h1 id="13-小试宏刀"><a href="#13-小试宏刀" class="headerlink" title="13. 小试宏刀"></a>13. 小试宏刀</h1><ul><li>请谈谈你对<code>#define</code>的理解。</li><li>请尝试着解释程序的输出。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAP(a, b, t) t = a; a = b; b = t</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(a) a *a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPWHEN(a, b, t, cond) <span class="hljs-keyword">if</span> (cond) SWAP(a, b, t)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> tmp;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> w = <span class="hljs-number">3</span>;<br>    SWAP(x, y, tmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, y = %d, tmp = %d\n&quot;</span>, x, y, tmp);<br>    <span class="hljs-keyword">if</span> (x &gt; y) SWAP(x, y, tmp);<span class="hljs-comment">//2 &gt; 1 成立</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, y = %d, tmp = %d\n&quot;</span>, x, y, tmp);<br>    SWAPWHEN(x, y, tmp, SQUARE(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + z++ + ++w) == <span class="hljs-number">100</span>);<span class="hljs-comment">//1 + 2 + 3 + 4 * 1 + 2 + 4 + 5 = 21;所以为，x,y,tmp,0;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, y = %d\n&quot;</span>, x, y, tmp);<span class="hljs-comment">//x = y =2;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;z = %d, w = %d, tmp = %d\n&quot;</span>, z, w, tmp);<span class="hljs-comment">//z = 4 后z++,z = 5;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>) t = a;<span class="hljs-comment">//不执行此项</span><br>a = b;<span class="hljs-comment">//x = y = 2;</span><br>b = t;<span class="hljs-comment">//y = tmp = 2;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">x = 2, y = 1, tmp = 1<br>x = 1, y = 2, tmp = 2<br>x = 2, y = 2<br>z = 5, w = 5, tmp = 2<br></code></pre></td></tr></table></figure><h1 id="14-GNU-Linux命令-选做"><a href="#14-GNU-Linux命令-选做" class="headerlink" title="14. GNU&#x2F;Linux命令 (选做)"></a>14. GNU&#x2F;Linux命令 (选做)</h1><p>你知道以下命令的含义和用法吗：</p><p>注：<br>嘿！你或许对Linux命令不是很熟悉，甚至你没听说过Linux。<br>但别担心，这是选做题，不会对你的面试产生很大的影响！<br>了解Linux是加分项，但不了解也不扣分哦！</p><ul><li><code>ls</code></li><li><code>rm</code></li><li><code>whoami</code></li></ul><p>请问你还了解哪些GNU&#x2F;Linux的命令呢。</p><blockquote><p>恭喜你做到这里！你的坚持战胜了绝大多数看到这份试题的同学。<br>或许你自己对答题的表现不满意,但别担心，请自信一点呐。<br>坚持到达这里已经证明了你的优秀。  </p></blockquote><p>-<code> ls</code> 是一个用于列出目录内容的命令。常见用法包括：</p><blockquote><p><code>ls</code>：列出当前目录的文件和子目录。<br><code> ls -l</code>：以长格式显示文件和目录的详细信息，包括权限、拥有者、文件大小和修改时间。<br><code>ls -a</code>：显示所有文件，包括以.开头的隐藏文件。</p></blockquote><ul><li><p><code>rm</code> 是一个用于删除文件和目录的命令。</p><blockquote><p><code>-f</code>：强制删除，忽略不存在的文件，不提示确认。<br><code>-i</code>：交互模式，在删除每个文件之前提示确认。<br><code>-r</code> ：递归删除，用于删除目录及其内容。<br><code>-v</code>：显示详细输出，列出正在删除的文件。</p></blockquote></li><li><p><code>whoami</code> 用于显示当前用户的用户名。</p></li></ul>]]></content>
    
    
    <summary type="html">人生的价值，并不是用时间，而是用深度去衡量的。</summary>
    
    
    
    
    <category term="C语言" scheme="https://xyz2781790037.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="纳新题" scheme="https://xyz2781790037.github.io/tags/%E7%BA%B3%E6%96%B0%E9%A2%98/"/>
    
  </entry>
  
</feed>
